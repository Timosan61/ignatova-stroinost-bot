#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫ URL Railway –¥–ª—è ignatova-stroinost-bot
"""
import requests
import string
import itertools

def generate_railway_variations():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã Railway URL"""
    
    # –ë–∞–∑–æ–≤—ã–µ –∏–º–µ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞
    project_names = [
        "ignatova-stroinost-bot",
        "ignatova-stroinost-bot-production", 
        "ignatova-bot",
        "stroinost-bot",
        "textilebot",
        "textile-bot"
    ]
    
    # –î–æ–º–µ–Ω—ã Railway
    domains = [
        "up.railway.app",
        "railway.app"
    ]
    
    urls = []
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ URL
    for name in project_names:
        for domain in domains:
            urls.append(f"https://{name}.{domain}")
    
    # web-production-XXXX —Ñ–æ—Ä–º–∞—Ç
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    hex_chars = '0123456789abcdef'
    for combo in itertools.product(hex_chars, repeat=4):
        code = ''.join(combo)
        urls.append(f"https://web-production-{code}.up.railway.app")
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ –ø–µ—Ä–≤—ã—Ö 20 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        if len([u for u in urls if 'web-production' in u]) >= 20:
            break
    
    return urls

def check_url(url, timeout=3):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    try:
        response = requests.get(url, timeout=timeout)
        
        result = {
            'url': url,
            'status': response.status_code,
            'working': False,
            'is_bot': False,
            'content_preview': ''
        }
        
        if response.status_code == 200:
            result['working'] = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            try:
                data = response.json()
                result['content_preview'] = str(data)[:200]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
                if any(key in data for key in ['status', 'bot', 'ignatova', 'textile']):
                    result['is_bot'] = True
                    
            except:
                content = response.text[:200]
                result['content_preview'] = content
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                bot_indicators = ['ignatova', 'textile', 'stroinost', 'bot', 'webhook']
                if any(indicator in content.lower() for indicator in bot_indicators):
                    result['is_bot'] = True
        
        return result
        
    except Exception as e:
        return {
            'url': url,
            'status': 'error',
            'working': False,
            'is_bot': False,
            'error': str(e)
        }

def main():
    print("üîç –ü–û–õ–ù–´–ô –ü–û–ò–°–ö Railway URL –¥–ª—è ignatova-stroinost-bot")
    print("=" * 60)
    
    urls = generate_railway_variations()
    print(f"üí´ –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(urls)} URL –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...")
    print()
    
    working_urls = []
    bot_urls = []
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ URL
    priority_urls = [
        "https://ignatova-stroinost-bot.up.railway.app",
        "https://ignatova-stroinost-bot-production.up.railway.app",
        f"https://web-production-472c.up.railway.app"  # –ò–∑ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
    ]
    
    print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï URL:")
    for url in priority_urls:
        print(f"   –ü—Ä–æ–≤–µ—Ä—è–µ–º: {url}")
        result = check_url(url, timeout=10)
        
        if result['working']:
            working_urls.append(result)
            print(f"   ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç! –°—Ç–∞—Ç—É—Å: {result['status']}")
            print(f"   üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {result['content_preview']}")
            
            if result['is_bot']:
                bot_urls.append(result)
                print(f"   ü§ñ –ü–û–•–û–ñ–ï –ù–ê –ù–ê–® –ë–û–¢!")
        else:
            print(f"   ‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.get('error', result['status'])}")
        print()
    
    if bot_urls:
        print("üéâ –ù–ê–ô–î–ï–ù–´ –†–ê–ë–û–ß–ò–ï URL –ë–û–¢–ê!")
        for result in bot_urls:
            print(f"   ‚úÖ {result['url']}")
            print(f"      ‚îî‚îÄ Webhook: {result['url']}/webhook")
        return bot_urls[0]['url']
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
    print("üîç –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–û–ò–°–ö...")
    
    batch_size = 10
    for i in range(0, min(len(urls), 50), batch_size):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
        batch = urls[i:i + batch_size]
        print(f"\nüì¶ –ü–∞–∫–µ—Ç {i//batch_size + 1}: –ø—Ä–æ–≤–µ—Ä—è–µ–º {len(batch)} URL...")
        
        for url in batch:
            if url in [u['url'] for u in working_urls]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ
                continue
                
            result = check_url(url)
            
            if result['working']:
                working_urls.append(result)
                print(f"   ‚úÖ {url} - —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                
                if result['is_bot']:
                    bot_urls.append(result)
                    print(f"   ü§ñ –ù–ê–ô–î–ï–ù –ë–û–¢: {url}")
                    return url
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –ü–û–ò–°–ö–ê:")
    
    if bot_urls:
        print(f"üéâ –ù–ê–ô–î–ï–ù–û {len(bot_urls)} URL —Å –±–æ—Ç–æ–º:")
        for result in bot_urls:
            print(f"   ü§ñ {result['url']}")
        return bot_urls[0]['url']
    
    elif working_urls:
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(working_urls)} —Ä–∞–±–æ—á–∏—Ö URL (–Ω–æ –Ω–µ –±–æ—Ç—ã):")
        for result in working_urls:
            print(f"   ‚úÖ {result['url']} - {result['content_preview'][:50]}...")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ —ç—Ç–∏—Ö URL")
        return working_urls[0]['url']
    
    else:
        print("‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û —Ä–∞–±–æ—á–∏—Ö URL!")
        print("\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
        print("   1. –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway")
        print("   2. –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL")
        print("   3. –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–ø–ª–æ–µ–º")
        print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Railway Dashboard")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–µ–ø–ª–æ—è")
        print("   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω–æ–π –ø–æ–∏—Å–∫ –≤ Railway")
        return None

if __name__ == "__main__":
    found_url = main()
    if found_url:
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô WEBHOOK URL:")
        print(f"   {found_url}/webhook")
    else:
        print(f"\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê Railway Dashboard")