#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import sys
import os
import traceback
sys.path.append('.')

async def test_voice_with_real_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å
        from bot.voice.voice_service import VoiceService
        from bot.config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY
        
        print("=== –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –ì–û–õ–û–°–û–í–û–ì–û –°–ï–†–í–ò–°–ê ===")
        print(f"üîë TELEGRAM_BOT_TOKEN: {'‚úÖ' if TELEGRAM_BOT_TOKEN else '‚ùå'}")
        print(f"üîë OPENAI_API_KEY: {'‚úÖ' if OPENAI_API_KEY else '‚ùå'}")
        
        if not TELEGRAM_BOT_TOKEN:
            print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if not OPENAI_API_KEY:
            print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        voice_service = VoiceService(TELEGRAM_BOT_TOKEN, OPENAI_API_KEY)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å
        service_info = voice_service.get_service_info()
        test_results = await voice_service.test_service()
        
        print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ:")
        print(f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {service_info['status']}")
        print(f"‚Ä¢ Telegram —Ç–æ–∫–µ–Ω: {'‚úÖ' if test_results['telegram_token'] else '‚ùå'}")
        print(f"‚Ä¢ OpenAI –∫–ª—é—á: {'‚úÖ' if test_results['openai_key'] else '‚ùå'}")
        print(f"‚Ä¢ Whisper –∫–ª–∏–µ–Ω—Ç: {'‚úÖ' if test_results['whisper_client'] else '‚ùå'}")
        print(f"‚Ä¢ Whisper –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ' if test_results['whisper_connection'] else '‚ùå'}")
        print(f"‚Ä¢ –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤: {'‚úÖ' if test_results['service_ready'] else '‚ùå'}")
        
        if not test_results['service_ready']:
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            if not test_results['whisper_connection']:
                print("   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Whisper API")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º file_id
        print(f"\nüé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º file_id...")
        test_voice_data = {
            'file_id': 'invalid_file_id_test',
            'duration': 3,
            'file_size': 1000
        }
        
        try:
            result = await voice_service.transcribe_voice_message(
                test_voice_data, "test_user", "test_msg"
            )
            
            print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"‚Ä¢ –£—Å–ø–µ—Ö: {result.get('success', False)}")
            print(f"‚Ä¢ –¢–µ–∫—Å—Ç: {result.get('text', 'None')}")
            print(f"‚Ä¢ –û—à–∏–±–∫–∞: {result.get('error', 'None')}")
            
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            print(f"üìÑ –¢—Ä–µ–π—Å: {traceback.format_exc()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        print(f"\nüì• –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
        from bot.voice.telegram_audio import TelegramAudioDownloader
        
        try:
            async with TelegramAudioDownloader(TELEGRAM_BOT_TOKEN) as downloader:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ  
                file_info = await downloader.get_file_info('invalid_file_id_test')
                print(f"üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: {file_info}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            
        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_voice_with_real_data())