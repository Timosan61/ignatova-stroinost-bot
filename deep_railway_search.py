#!/usr/bin/env python3
"""
–ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ Railway URL –¥–ª—è –±–æ—Ç–∞
"""
import requests
import json

def test_bot_endpoint(url):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –Ω–∞—à–∏–º –±–æ—Ç–æ–º"""
    try:
        response = requests.get(url, timeout=5)
        
        if response.status_code == 200:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –æ—Ç–≤–µ—Ç
            try:
                data = response.json()
                # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
                if isinstance(data, dict):
                    content = json.dumps(data).lower()
                    bot_indicators = ['ignatova', 'textile', 'stroinost', 'bot', 'status', 'openai', 'zep']
                    score = sum(1 for indicator in bot_indicators if indicator in content)
                    
                    if score >= 2:
                        return {
                            'url': url,
                            'status': 'BOT_FOUND',
                            'score': score,
                            'data': data,
                            'indicators': [i for i in bot_indicators if i in content]
                        }
                        
            except json.JSONDecodeError:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML/—Ç–µ–∫—Å—Ç
                content = response.text.lower()
                bot_indicators = ['ignatova', 'textile', 'stroinost', 'webhook', 'fastapi']
                score = sum(1 for indicator in bot_indicators if indicator in content)
                
                if score >= 1:
                    return {
                        'url': url,
                        'status': 'POSSIBLE_BOT',
                        'score': score,
                        'content_preview': response.text[:300],
                        'indicators': [i for i in bot_indicators if i in content]
                    }
        
        return {
            'url': url,
            'status': f'HTTP_{response.status_code}',
            'content_preview': response.text[:100] if response.text else 'Empty'
        }
        
    except Exception as e:
        return {
            'url': url,
            'status': 'ERROR',
            'error': str(e)
        }

def main():
    print("üîç –ì–õ–£–ë–û–ö–ò–ô –ü–û–ò–°–ö Railway URL –¥–ª—è ignatova-stroinost-bot")
    print("=" * 60)
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –¥–æ–º–µ–Ω—ã Railway
    base_domains = [
        "railway.app",
        "up.railway.app",
        "railway.com"
    ]
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
    prefixes = [
        "ignatova-stroinost-bot",
        "ignatova-stroinost-bot-production",
        "ignatova-bot",
        "stroinost-bot",
        "textilebot",
        "textile-bot",
        "production",
        "web-production-472c",  # –ò–∑ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
    ]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_urls = []
    
    for domain in base_domains:
        for prefix in prefixes:
            test_urls.append(f"https://{prefix}.{domain}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    special_urls = [
        "https://web-production-472c.up.railway.app",
        "https://ignatova-stroinost-bot.railway.internal",  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π URL
    ]
    test_urls.extend(special_urls)
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_urls)} URL –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...")
    print()
    
    results = []
    bot_candidates = []
    
    for i, url in enumerate(test_urls, 1):
        print(f"[{i:2d}/{len(test_urls)}] –¢–µ—Å—Ç–∏—Ä—É–µ–º: {url}")
        
        result = test_bot_endpoint(url)
        results.append(result)
        
        if result['status'] in ['BOT_FOUND', 'POSSIBLE_BOT']:
            bot_candidates.append(result)
            print(f"   üéØ {result['status']}: Score {result.get('score', 0)}")
            print(f"   üìã –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {result.get('indicators', [])}")
            
        elif result['status'].startswith('HTTP_2'):
            print(f"   ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω: {result['status']}")
            
        elif result['status'] == 'ERROR':
            if 'timeout' not in result.get('error', '').lower():
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        else:
            print(f"   ‚ö†Ô∏è {result['status']}")
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:")
    
    if bot_candidates:
        print(f"\nüéâ –ù–ê–ô–î–ï–ù–û {len(bot_candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –±–æ—Ç–∞:")
        
        for candidate in sorted(bot_candidates, key=lambda x: x.get('score', 0), reverse=True):
            print(f"\nü§ñ {candidate['url']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {candidate['status']}")
            print(f"   –†–µ–π—Ç–∏–Ω–≥: {candidate.get('score', 0)}/7")
            print(f"   –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {candidate.get('indicators', [])}")
            
            if 'data' in candidate:
                print(f"   JSON –¥–∞–Ω–Ω—ã–µ: {candidate['data']}")
            elif 'content_preview' in candidate:
                print(f"   –ü—Ä–µ–≤—å—é: {candidate['content_preview'][:100]}...")
                
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ª—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç
        best = bot_candidates[0]
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô URL: {best['url']}")
        print(f"   Webhook: {best['url']}/webhook")
        
    else:
        print("\n‚ùå –ë–û–¢–´ –ù–ï –ù–ê–ô–î–ï–ù–´!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ URL
        working_urls = [r for r in results if r['status'].startswith('HTTP_2')]
        if working_urls:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(working_urls)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö URL:")
            for result in working_urls[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   - {result['url']} ({result['status']})")
        
        print(f"\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
        print(f"   1. –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print(f"   2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç –∏–ª–∏ –ø—É—Ç—å")  
        print(f"   3. –ü—Ä–æ–±–ª–µ–º—ã —Å Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
        print(f"   4. –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ Railway —Å–µ—Ç–∏")
        
        print(f"\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Railway Dashboard - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞")
        print(f"   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ railway.json –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        print(f"   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω–æ–π —Ä–µ–¥–µ–ø–ª–æ–π")
        print(f"   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Railway –Ω–∞ –æ—à–∏–±–∫–∏")

if __name__ == "__main__":
    main()