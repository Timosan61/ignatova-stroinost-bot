#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ Zep Knowledge Graph
"""

import os
import sys
import asyncio
import logging
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot.agent import ConversationAgent

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_knowledge_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞
    agent = ConversationAgent()
    
    if not agent.zep_client:
        print("‚ùå Zep –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ZEP_API_KEY.")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤?",
        "–∫–∞–∫–∏–µ –µ—Å—Ç—å —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã?",
        "—á—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Å–∏—Ö–æ—Ç–∏–ø–∞?",
        "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –º–∞—Ä–∞—Ñ–æ–Ω –ø–æ—Ö—É–¥–µ–Ω–∏—è?",
        "–∫–∞–∫ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏?",
        "—á—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç –¥–æ—Ä–æ–≥–æ?",
        "—Ç–µ—Ö–Ω–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è",
        "—Ç—Ä–∏–≥–≥–µ—Ä –ø–æ—Ç–µ—Ä–∏ –¥–ª—è —Ö–æ–ª–æ–¥–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
    ]
    
    print(f"\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤:\n")
    
    for i, query in enumerate(test_queries, 1):
        print(f"üîç –ó–∞–ø—Ä–æ—Å {i}: {query}")
        
        try:
            # –ò—â–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
            context = await agent.search_knowledge_base(query, limit=3)
            
            if context:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(context)} —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                preview = context[:200] + "..." if len(context) > 200 else context
                print(f"üìÑ –ü—Ä–µ–≤—å—é: {preview}")
            else:
                print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            
        print("-" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:")
    
    test_message = "–ö–ª–∏–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –¥–æ—Ä–æ–≥–æ –∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –¥–µ–Ω–µ–≥. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?"
    print(f"–í–æ–ø—Ä–æ—Å: {test_message}")
    
    try:
        response = await agent.generate_response(
            user_message=test_message,
            session_id="test_knowledge_session",
            user_name="–¢–µ—Å—Ç–µ—Ä"
        )
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: {response}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_knowledge_search())