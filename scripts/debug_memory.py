#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ memory —Å–µ—Å—Å–∏–π –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
"""

import os
import asyncio
import logging
from dotenv import load_dotenv
from zep_cloud.client import AsyncZep

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def debug_memory_sessions():
    """–û—Ç–ª–∞–¥–∫–∞ memory —Å–µ—Å—Å–∏–π"""
    zep_api_key = os.getenv('ZEP_API_KEY')
    if not zep_api_key:
        print("‚ùå ZEP_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    zep_client = AsyncZep(api_key=zep_api_key)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π
    test_sessions = [
        "knowledge_objections_session_1",
        "knowledge_scripts_session_1",
        "knowledge_sales_methodology_session_1"
    ]
    
    for session_id in test_sessions:
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é: {session_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞–º—è—Ç—å —Å–µ—Å—Å–∏–∏
            memory = await zep_client.memory.get(session_id=session_id)
            
            if memory:
                print(f"‚úÖ –°–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                print(f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(memory.messages) if memory.messages else 0}")
                
                if memory.messages:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                    print("üìÑ –ü–µ—Ä–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
                    for i, msg in enumerate(memory.messages[:4]):
                        role = msg.role_type or msg.role
                        content = msg.content[:100] + "..." if len(msg.content) > 100 else msg.content
                        print(f"  {i+1}. [{role}]: {content}")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
                    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ —Å–µ—Å—Å–∏–∏ {session_id}:")
                    test_queries = [
                        "–≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è",
                        "—Å–∫—Ä–∏–ø—Ç", 
                        "–ø—Ä–æ–¥–∞–∂–∏",
                        "–∫–ª–∏–µ–Ω—Ç"
                    ]
                    
                    for query in test_queries:
                        try:
                            search_result = await zep_client.memory.search(
                                session_id=session_id,
                                query=query,
                                limit=1
                            )
                            
                            if search_result and hasattr(search_result, 'results') and search_result.results:
                                result_count = len(search_result.results)
                                print(f"  '{query}': ‚úÖ –Ω–∞–π–¥–µ–Ω–æ {result_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                first_result = search_result.results[0]
                                if hasattr(first_result, 'message') and first_result.message:
                                    content = first_result.message.content[:150] + "..."
                                    print(f"    –ü—Ä–µ–≤—å—é: {content}")
                            else:
                                print(f"  '{query}': ‚ùå –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                                
                        except Exception as e:
                            print(f"  '{query}': ‚ùå –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                    
            else:
                print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(debug_memory_sessions())