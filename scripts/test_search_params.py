#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è memory.search
"""

import os
import asyncio
from dotenv import load_dotenv
from zep_cloud.client import AsyncZep

load_dotenv()

async def test_search_params():
    zep_api_key = os.getenv('ZEP_API_KEY')
    zep_client = AsyncZep(api_key=zep_api_key)
    
    session_id = "knowledge_objections_session_1"
    
    # –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    search_variants = [
        {"text": "–≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è", "limit": 3},
        {"message": "–≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è", "limit": 3},
        {"content": "–≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è", "limit": 3},
        {"search": "–≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è", "limit": 3},
        {"q": "–≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è", "limit": 3}
    ]
    
    for i, params in enumerate(search_variants):
        try:
            print(f"\nüß™ –¢–µ—Å—Ç {i+1}: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã {params}")
            result = await zep_client.memory.search(
                session_id=session_id,
                **params
            )
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
            if hasattr(result, 'results') and result.results:
                print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(result.results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_search_params())