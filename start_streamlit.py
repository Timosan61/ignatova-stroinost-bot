#!/usr/bin/env python3
"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
"""

import streamlit as st
import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    st.set_page_config(
        page_title="Ignatova Stroinost Bot Admin",
        page_icon="ü§ñ",
        layout="wide"
    )
    
    st.title("ü§ñ Ignatova Stroinost Bot - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.header("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", "üü¢ –ê–∫—Ç–∏–≤–µ–Ω", help="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway")
        
    with col2:
        st.metric("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞", help="Zep Memory —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    with col3:
        st.metric("AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã", "üü¢ –î–æ—Å—Ç—É–ø–Ω—ã", help="OpenAI –∏ Anthropic –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
    
    # –†–∞–∑–¥–µ–ª—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    st.header("üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    tab1, tab2, tab3, tab4 = st.tabs(["üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "üí¨ –ü–∞–º—è—Ç—å", "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
    
    with tab1:
        st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        instructions_path = current_dir / "data" / "instruction.json"
        
        if instructions_path.exists():
            import json
            try:
                with open(instructions_path, 'r', encoding='utf-8') as f:
                    instructions = json.load(f)
                
                st.success(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                if 'main_instruction' in instructions:
                    st.text_area(
                        "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:",
                        value=instructions['main_instruction'],
                        height=200,
                        disabled=True,
                        help="–≠—Ç–æ —Ç–µ–∫—É—â–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±–æ—Ç–∞"
                    )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if 'settings' in instructions:
                    st.json(instructions['settings'])
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {e}")
        else:
            st.warning("‚ö†Ô∏è –§–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    with tab2:
        st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
        
        st.info("üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Zep Memory –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", type="primary"):
                st.rerun()
                
        with col2:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                st.warning("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –≤–≤–æ–¥–∞ User ID")
                
    with tab3:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.code(f"""
        WEBHOOK_URL: {os.getenv('WEBHOOK_URL', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}
        PORT: {os.getenv('PORT', '8000')}
        DEBUG: {os.getenv('DEBUG', 'False')}
        """)
        
        st.info("‚ÑπÔ∏è –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway")
        
    with tab4:
        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π", "N/A", help="–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
            
        with col2:
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "N/A", help="–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
            
        with col3:
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", "N/A", help="–¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    
    # –§—É—Ç–µ—Ä
    st.divider()
    st.caption("ü§ñ Ignatova Stroinost Bot Admin Panel v2.0 | Powered by Claude & OpenAI")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    with st.expander("üë®‚Äçüíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"):
        st.code(f"""
        Python: {sys.version}
        Streamlit: {st.__version__}
        Current Directory: {current_dir}
        Environment: {os.getenv('RAILWAY_ENVIRONMENT', 'local')}
        """)

if __name__ == "__main__":
    try:
        logger.info("Starting Streamlit application...")
        main()
    except Exception as e:
        logger.error(f"Error in Streamlit app: {e}")
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")