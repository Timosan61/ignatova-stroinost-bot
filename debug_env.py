#!/usr/bin/env python3
"""
Debug: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Railway
"""
import os

print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
print(f"TELEGRAM_BOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('TELEGRAM_BOT_TOKEN') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
print(f"OPENAI_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('OPENAI_API_KEY') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
print(f"ANTHROPIC_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('ANTHROPIC_API_KEY') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
print(f"ZEP_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('ZEP_API_KEY') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
print(f"WEBHOOK_SECRET_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('WEBHOOK_SECRET_TOKEN') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

# –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
try:
    from bot.config import INSTRUCTION_FILE, OPENAI_API_KEY, ANTHROPIC_API_KEY, ZEP_API_KEY
    print(f"INSTRUCTION_FILE: {INSTRUCTION_FILE}")
    print(f"OpenAI –¥–æ—Å—Ç—É–ø–µ–Ω: {bool(OPENAI_API_KEY)}")
    print(f"Anthropic –¥–æ—Å—Ç—É–ø–µ–Ω: {bool(ANTHROPIC_API_KEY)}")
    print(f"Zep –¥–æ—Å—Ç—É–ø–µ–Ω: {bool(ZEP_API_KEY)}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ config: {e}")

# –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
try:
    import json
    with open('data/instruction.json', 'r', encoding='utf-8') as f:
        instruction = json.load(f)
    print(f"‚úÖ instruction.json –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(instruction.get('system_instruction', ''))}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ instruction.json: {e}")