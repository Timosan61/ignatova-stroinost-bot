"""
ü§ñ ignatova-stroinost-bot Bot Webhook Server

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è ignatova-stroinost-bot.
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ Textile Pro Bot —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–æ–¥ –Ω–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É
- –û–±—Ä–∞–±–æ—Ç–∫–∞ Business API —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç –≤–∞—à–µ–≥–æ Premium –∞–∫–∫–∞—É–Ω—Ç–∞)
- AI-powered –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ OpenAI
- –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ Zep
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
"""

import os
import sys
import logging
import traceback
from datetime import datetime
from fastapi import FastAPI, Request, HTTPException
import telebot
import json
import asyncio
import requests

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ ignatova-stroinost-bot Bot Webhook Server...")

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å AI agent
try:
    import bot
    print("‚úÖ –ú–æ–¥—É–ª—å bot –Ω–∞–π–¥–µ–Ω")
    from bot.agent import agent
    print("‚úÖ AI Agent –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    AI_ENABLED = True
except ImportError as e:
    print(f"‚ö†Ô∏è AI Agent –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üìÅ –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir('.')}")
    if os.path.exists('bot'):
        print(f"üìÅ –§–∞–π–ª—ã –≤ bot/: {os.listdir('bot')}")
    AI_ENABLED = False
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AI Agent: {e}")
    AI_ENABLED = False

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEBHOOK_SECRET_TOKEN = os.getenv("WEBHOOK_SECRET_TOKEN", "QxLZquGScgx1QmwsuUSfJU6HpyTUJoHf2XD4QisrjCk")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

print(f"‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω: {TELEGRAM_BOT_TOKEN[:20]}...")

# === –°–û–ó–î–ê–ù–ò–ï –°–ò–ù–•–†–û–ù–ù–û–ì–û –ë–û–¢–ê (–ù–ï ASYNC!) ===
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
import logging.handlers

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs("logs", exist_ok=True)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
file_handler = logging.handlers.RotatingFileHandler(
    filename="logs/bot.log",
    maxBytes=10*1024*1024,  # 10MB
    backupCount=5,
    encoding='utf-8'
)
file_handler.setFormatter(formatter)
file_handler.setLevel(logging.INFO)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
console_handler.setLevel(logging.INFO)

# –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(file_handler)
logger.addHandler(console_handler)

# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
logger.info("üöÄ ignatova-stroinost-bot Webhook server started")
logger.info(f"üìÅ Logs directory: {os.path.abspath('logs')}")
logger.info(f"ü§ñ Bot token: {TELEGRAM_BOT_TOKEN[:20]}...")
logger.info(f"üîÑ AI Agent enabled: {AI_ENABLED}")

# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø BUSINESS API ===
def send_business_message(chat_id, text, business_connection_id):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Business API –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å
    (pyTelegramBotAPI –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç business_connection_id)
    """
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "business_connection_id": business_connection_id
    }
    
    try:
        response = requests.post(url, json=data, timeout=10)
        result = response.json()
        
        if result.get("ok"):
            logger.info(f"‚úÖ Business API: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ HTTP API")
            return result.get("result")
        else:
            logger.error(f"‚ùå Business API –æ—à–∏–±–∫–∞: {result}")
            return None
    except Exception as e:
        logger.error(f"‚ùå Business API HTTP –æ—à–∏–±–∫–∞: {e}")
        return None

# === FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ===
app = FastAPI(
    title="ü§ñ ignatova-stroinost-bot Bot", 
    description="Webhook-only —Ä–µ–∂–∏–º –¥–ª—è ignatova-stroinost-bot –±–æ—Ç–∞"
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö updates –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
from collections import deque
last_updates = deque(maxlen=10)
update_counter = 0

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ Business Connection –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
business_owners = {}  # {business_connection_id: owner_user_id}

@app.get("/")
async def health_check():
    """Health check endpoint"""
    try:
        bot_info = bot.get_me()
        return {
            "status": "üü¢ ONLINE", 
            "service": "ignatova-stroinost-bot Bot Webhook",
            "bot": f"@{bot_info.username}",
            "bot_id": bot_info.id,
            "mode": "WEBHOOK_ONLY",
            "ai_status": "‚úÖ ENABLED" if AI_ENABLED else "‚ùå DISABLED",
            "openai_configured": bool(os.getenv('OPENAI_API_KEY')),
            "endpoints": {
                "webhook_info": "/webhook/info",
                "set_webhook": "/webhook/set",
                "delete_webhook": "/webhook (DELETE method)",
                "business_owners": "/debug/business-owners",
                "last_updates": "/debug/last-updates"
            },
            "hint": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /webhook/set –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook"
        }
    except Exception as e:
        return {"status": "üî¥ ERROR", "error": str(e)}

@app.get("/webhook/set")
async def set_webhook_get():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —á–µ—Ä–µ–∑ GET (–¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞)"""
    return await set_webhook()

@app.post("/webhook/set")
async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    try:
        webhook_url = "https://ignatova-stroinost-bot-production.up.railway.app/webhook"
        
        result = bot.set_webhook(
            url=webhook_url,
            secret_token=WEBHOOK_SECRET_TOKEN,
            allowed_updates=[
                "message",
                "business_connection", 
                "business_message",
                "edited_business_message",
                "deleted_business_messages"
            ]
        )
        
        if result:
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return {
                "status": "‚úÖ SUCCESS",
                "webhook_url": webhook_url,
                "secret_token": "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω",
                "allowed_updates": "‚úÖ Business API –≤–∫–ª—é—á–µ–Ω"
            }
        else:
            return {"status": "‚ùå FAILED"}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return {"status": "‚ùå ERROR", "error": str(e)}

@app.post("/webhook")
async def process_webhook(request: Request):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook"""
    global update_counter
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º secret token –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        secret_token = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
        if secret_token != WEBHOOK_SECRET_TOKEN:
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π secret token: {secret_token}")
            return {"ok": False, "error": "Invalid secret token"}
        
        json_data = await request.body()
        json_string = json_data.decode('utf-8')
        
        logger.info(f"üì® Webhook –ø–æ–ª—É—á–µ–Ω: {json_string[:150]}...")
        print(f"üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook update...")
        
        update_dict = json.loads(json_string)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º update –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        update_counter += 1
        debug_update = {
            "id": update_counter,
            "timestamp": datetime.now().isoformat(),
            "type": "unknown",
            "data": update_dict
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø update
        if "message" in update_dict:
            debug_update["type"] = "message"
        elif "business_message" in update_dict:
            debug_update["type"] = "business_message"
        elif "business_connection" in update_dict:
            debug_update["type"] = "business_connection"
        elif "edited_business_message" in update_dict:
            debug_update["type"] = "edited_business_message"
        elif "deleted_business_messages" in update_dict:
            debug_update["type"] = "deleted_business_messages"
        else:
            debug_update["type"] = f"other: {list(update_dict.keys())}"
            
        last_updates.append(debug_update)
        logger.info(f"üìä Update #{update_counter} —Ç–∏–ø: {debug_update['type']}")
        
        # === –û–ë–´–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===
        if "message" in update_dict:
            msg = update_dict["message"]
            chat_id = msg["chat"]["id"]
            text = msg.get("text", "") or msg.get("caption", "")
            user_id = msg.get("from", {}).get("id", "unknown")
            user_name = msg.get("from", {}).get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
                try:
                    bot.send_chat_action(chat_id, 'typing')
                except Exception as typing_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {typing_error}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                if text.startswith("/start"):
                    if AI_ENABLED:
                        response = agent.get_welcome_message()
                    else:
                        response = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ignatova-stroinost-bot –±–æ—Ç!"
                
                elif text.startswith("/help"):
                    response = """‚ÑπÔ∏è –ü–æ–º–æ—â—å:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É!"""
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
                elif text and AI_ENABLED:
                    try:
                        session_id = f"user_{user_id}"
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if agent.zep_client:
                            await agent.ensure_user_exists(f"user_{user_id}", {
                                'first_name': user_name,
                                'email': f'{user_id}@telegram.user'
                            })
                            await agent.ensure_session_exists(session_id, f"user_{user_id}")
                        response = await agent.generate_response(text, session_id, user_name)
                        
                    except Exception as ai_error:
                        logger.error(f"–û—à–∏–±–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {ai_error}")
                        response = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞."
                    
                elif text:
                    # Fallback –µ—Å–ª–∏ AI –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
                    response = f"üëã {user_name}, –ø–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç. –ú–∏–Ω—É—Ç–æ—á–∫—É!"
                else:
                    return {"ok": True, "action": "no_action"}
                    
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                bot.send_message(chat_id, response)
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞.")
        
        # === BUSINESS –°–û–û–ë–©–ï–ù–ò–Ø ===
        elif "business_message" in update_dict:
            bus_msg = update_dict["business_message"]
            
            chat_id = bus_msg["chat"]["id"]
            text = bus_msg.get("text", "") or bus_msg.get("caption", "")
            user_id = bus_msg.get("from", {}).get("id", "unknown")
            business_connection_id = bus_msg.get("business_connection_id")
            user_name = bus_msg.get("from", {}).get("first_name", "–ö–ª–∏–µ–Ω—Ç")
            
            # üö´ –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
            if business_connection_id and business_connection_id in business_owners:
                owner_id = business_owners[business_connection_id]
                if str(user_id) == str(owner_id):
                    logger.info(f"üö´ –ò–ì–ù–û–†–ò–†–£–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {user_name} (ID: {user_id})")
                    return {"ok": True, "action": "ignored_owner_message", "reason": "message_from_business_owner"}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º business —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
            if text:
                try:
                    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É business message: text='{text}', chat_id={chat_id}")
                    
                    if AI_ENABLED:
                        logger.info(f"ü§ñ AI –≤–∫–ª—é—á–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
                        session_id = f"business_{user_id}"
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if agent.zep_client:
                            await agent.ensure_user_exists(f"business_{user_id}", {
                                'first_name': user_name,
                                'email': f'{user_id}@business.telegram.user'
                            })
                            await agent.ensure_session_exists(session_id, f"business_{user_id}")
                        response = await agent.generate_response(text, session_id, user_name)
                        logger.info(f"‚úÖ AI –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {response[:100]}...")
                    else:
                        logger.info(f"ü§ñ AI –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                        response = f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –ü–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç!"
                    
                    # –î–ª—è business_message –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    logger.info(f"üì§ –ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É {user_name}...")
                    if business_connection_id:
                        result = send_business_message(chat_id, response, business_connection_id)
                        if result:
                            logger.info(f"‚úÖ Business –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É –≤ —á–∞—Ç {chat_id}")
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Business API")
                    else:
                        bot.send_message(chat_id, response)
                        logger.warning(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (fallback)")
                    
                    print(f"‚úÖ Business –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {user_name}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ business —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    logger.error(f"Traceback:\n{traceback.format_exc()}")
                    
                    # –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –¢–û–ñ–ï —á–µ—Ä–µ–∑ Business API!
                    try:
                        error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞."
                        
                        if business_connection_id:
                            result = send_business_message(chat_id, error_message, business_connection_id)
                            if result:
                                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Business API")
                            else:
                                bot.send_message(chat_id, error_message)
                                logger.warning(f"‚ö†Ô∏è Business API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º")
                        else:
                            bot.send_message(chat_id, error_message)
                            logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ë–ï–ó Business API (–Ω–µ—Ç connection_id)")
                            
                    except Exception as send_error:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
        
        # === BUSINESS CONNECTION ===
        elif "business_connection" in update_dict:
            conn = update_dict["business_connection"]
            is_enabled = conn.get("is_enabled", False)
            connection_id = conn.get("id")
            user_info = conn.get("user", {})
            user_name = user_info.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            owner_user_id = user_info.get("id")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ Business Connection –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            if connection_id and owner_user_id:
                if is_enabled:
                    business_owners[connection_id] = owner_user_id
                    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü Business Connection: {user_name} (ID: {owner_user_id}) –¥–ª—è connection_id: {connection_id}")
                else:
                    business_owners.pop(connection_id, None)
                    logger.info(f"‚ùå –£–¥–∞–ª–µ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü Business Connection: {user_name} (connection_id: {connection_id})")
            
            status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if is_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            logger.info(f"{status} –∫ Business –∞–∫–∫–∞—É–Ω—Ç—É: {user_name}")
            logger.info(f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö Business Connection: {len(business_owners)}")
        
        return {"ok": True, "status": "processed", "update_id": update_counter}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return {"ok": False, "error": str(e)}

@app.on_event("startup")
async def startup():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\n" + "="*50)
    print("üöÄ ignatova-stroinost-bot BOT WEBHOOK SERVER")
    print("="*50)
    
    # –û—á–∏—â–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        bot.delete_webhook()
        print("üßπ Webhook –æ—á–∏—â–µ–Ω")
    except:
        pass
    
    try:
        bot_info = bot.get_me()
        print(f"ü§ñ –ë–æ—Ç: @{bot_info.username}")
        print(f"üìä ID: {bot_info.id}")
        print(f"üìõ –ò–º—è: {bot_info.first_name}")
        print("üîó –†–µ–∂–∏–º: WEBHOOK ONLY")
        print("‚ùå Polling: –û–¢–ö–õ–Æ–ß–ï–ù")
        print(f"ü§ñ AI: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù' if AI_ENABLED else '‚ùå –û–¢–ö–õ–Æ–ß–ï–ù'}")
        print(f"üîë OpenAI API: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if os.getenv('OPENAI_API_KEY') else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        print("="*50)
        logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –í–°–ï–ì–î–ê –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        print("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook...")
        try:
            webhook_url = os.getenv("WEBHOOK_URL", "https://ignatova-stroinost-bot-production.up.railway.app/webhook")
            result = bot.set_webhook(
                url=webhook_url,
                secret_token=WEBHOOK_SECRET_TOKEN,
                allowed_updates=[
                    "message",
                    "business_connection", 
                    "business_message",
                    "edited_business_message",
                    "deleted_business_messages"
                ]
            )
            
            if result:
                print(f"‚úÖ Webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {webhook_url}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                logger.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")

@app.on_event("shutdown")
async def shutdown():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ignatova-stroinost-bot Bot Webhook Server")
    print("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8000))
    print(f"üåê –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    uvicorn.run(app, host="0.0.0.0", port=port)