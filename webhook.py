"""
ü§ñ ignatova-stroinost-bot Bot Webhook Server

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è ignatova-stroinost-bot.
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ Textile Pro Bot —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–æ–¥ –Ω–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É
- –û–±—Ä–∞–±–æ—Ç–∫–∞ Business API —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç –≤–∞—à–µ–≥–æ Premium –∞–∫–∫–∞—É–Ω—Ç–∞)
- AI-powered –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ OpenAI
- –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ Zep
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
"""

import os
import sys
import logging
import traceback
from datetime import datetime
from fastapi import FastAPI, Request, HTTPException
import telebot
import json
import asyncio
import requests

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ ignatova-stroinost-bot Bot Webhook Server...")

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å AI agent
try:
    import bot
    print("‚úÖ –ú–æ–¥—É–ª—å bot –Ω–∞–π–¥–µ–Ω")
    from bot.agent import agent
    print("‚úÖ AI Agent –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    AI_ENABLED = True
except ImportError as e:
    print(f"‚ö†Ô∏è AI Agent –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üìÅ –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir('.')}")
    if os.path.exists('bot'):
        print(f"üìÅ –§–∞–π–ª—ã –≤ bot/: {os.listdir('bot')}")
    AI_ENABLED = False
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AI Agent: {e}")
    AI_ENABLED = False

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEBHOOK_SECRET_TOKEN = os.getenv("WEBHOOK_SECRET_TOKEN", "QxLZquGScgx1QmwsuUSfJU6HpyTUJoHf2XD4QisrjCk")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

print(f"‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω: {TELEGRAM_BOT_TOKEN[:20]}...")

# === –°–û–ó–î–ê–ù–ò–ï –°–ò–ù–•–†–û–ù–ù–û–ì–û –ë–û–¢–ê (–ù–ï ASYNC!) ===
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
import logging.handlers

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs("logs", exist_ok=True)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
file_handler = logging.handlers.RotatingFileHandler(
    filename="logs/bot.log",
    maxBytes=10*1024*1024,  # 10MB
    backupCount=5,
    encoding='utf-8'
)
file_handler.setFormatter(formatter)
file_handler.setLevel(logging.INFO)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
console_handler.setLevel(logging.INFO)

# –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(file_handler)
logger.addHandler(console_handler)

# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
logger.info("üöÄ ignatova-stroinost-bot Webhook server started")
logger.info(f"üìÅ Logs directory: {os.path.abspath('logs')}")
logger.info(f"ü§ñ Bot token: {TELEGRAM_BOT_TOKEN[:20]}...")
logger.info(f"üîÑ AI Agent enabled: {AI_ENABLED}")

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ì–û–õ–û–°–û–í–û–ì–û –°–ï–†–í–ò–°–ê ===
voice_service = None
try:
    from bot.voice.voice_service import VoiceService
    from bot.config import OPENAI_API_KEY
    
    if TELEGRAM_BOT_TOKEN and OPENAI_API_KEY:
        voice_service = VoiceService(
            telegram_bot_token=TELEGRAM_BOT_TOKEN,
            openai_api_key=OPENAI_API_KEY
        )
        logger.info("‚úÖ Voice service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ webhook")
    else:
        logger.warning("‚ö†Ô∏è Voice service –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–∫–µ–Ω—ã")
except ImportError as e:
    voice_service = None
    logger.warning(f"‚ö†Ô∏è Voice service –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
except Exception as e:
    voice_service = None
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Voice service: {e}")

# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ì–û–õ–û–°–û–í–û–ô –û–ë–†–ê–ë–û–¢–ö–ò ===
async def process_voice_transcription(voice_data: dict, user_id: int) -> dict:
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ –æ–±—Ä–∞–∑—Ü—É artem.integrator)"""
    try:
        if not voice_service:
            return {"success": False, "error": "Voice service not available"}
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º file_id –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
        file_id = voice_data.get('file_id')
        if not file_id:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π file_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ audio —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            file_id = voice_data.get('audio', {}).get('file_id') if isinstance(voice_data.get('audio'), dict) else None
        
        if not file_id:
            logger.error(f"‚ùå file_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ voice_data: {voice_data}")
            return {"success": False, "error": "No file_id in voice data"}
        
        logger.info(f"üîë –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π file_id: {file_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        result = await voice_service.transcribe_voice_message(
            voice_data, 
            str(user_id), 
            str(file_id)
        )
        
        return result or {"success": False, "error": "Voice processing failed"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≥–æ–ª–æ—Å–∞: {e}")
        logger.error(f"üìã voice_data: {voice_data}")
        import traceback
        logger.error(f"üìÑ –¢—Ä–µ–π—Å: {traceback.format_exc()}")
        return {"success": False, "error": f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}"}

# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø BUSINESS API ===
def send_business_message(chat_id, text, business_connection_id):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Business API –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å
    (pyTelegramBotAPI –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç business_connection_id)
    """
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "business_connection_id": business_connection_id
    }
    
    try:
        response = requests.post(url, json=data, timeout=10)
        result = response.json()
        
        if result.get("ok"):
            logger.info(f"‚úÖ Business API: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ HTTP API")
            return result.get("result")
        else:
            logger.error(f"‚ùå Business API –æ—à–∏–±–∫–∞: {result}")
            return None
    except Exception as e:
        logger.error(f"‚ùå Business API HTTP –æ—à–∏–±–∫–∞: {e}")
        return None

# === FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ===
app = FastAPI(
    title="ü§ñ ignatova-stroinost-bot Bot", 
    description="Webhook-only —Ä–µ–∂–∏–º –¥–ª—è ignatova-stroinost-bot –±–æ—Ç–∞"
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö updates –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
from collections import deque
last_updates = deque(maxlen=10)
update_counter = 0

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ Business Connection –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
business_owners = {}  # {business_connection_id: owner_user_id}

@app.get("/")
async def health_check():
    """Health check endpoint"""
    try:
        bot_info = bot.get_me()
        return {
            "status": "üü¢ ONLINE", 
            "service": "ignatova-stroinost-bot Bot Webhook",
            "bot": f"@{bot_info.username}",
            "bot_id": bot_info.id,
            "mode": "WEBHOOK_ONLY",
            "ai_status": "‚úÖ ENABLED" if AI_ENABLED else "‚ùå DISABLED",
            "openai_configured": bool(os.getenv('OPENAI_API_KEY')),
            "anthropic_configured": bool(os.getenv('ANTHROPIC_API_KEY')),
            "voice_status": "‚úÖ ENABLED" if voice_service else "‚ùå DISABLED",
            "endpoints": {
                "webhook_info": "/webhook/info",
                "set_webhook": "/webhook/set",
                "delete_webhook": "/webhook (DELETE method)",
                "business_owners": "/debug/business-owners",
                "last_updates": "/debug/last-updates"
            },
            "hint": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /webhook/set –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook"
        }
    except Exception as e:
        return {"status": "üî¥ ERROR", "error": str(e)}

@app.get("/webhook/set")
async def set_webhook_get():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —á–µ—Ä–µ–∑ GET (–¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞)"""
    return await set_webhook()

@app.post("/webhook/set")
async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    try:
        webhook_url = "https://ignatova-stroinost-bot-production.up.railway.app/webhook"
        
        result = bot.set_webhook(
            url=webhook_url,
            secret_token=WEBHOOK_SECRET_TOKEN,
            allowed_updates=[
                "message",
                "business_connection", 
                "business_message",
                "edited_business_message",
                "deleted_business_messages"
            ]
        )
        
        if result:
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return {
                "status": "‚úÖ SUCCESS",
                "webhook_url": webhook_url,
                "secret_token": "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω",
                "allowed_updates": "‚úÖ Business API –≤–∫–ª—é—á–µ–Ω"
            }
        else:
            return {"status": "‚ùå FAILED"}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return {"status": "‚ùå ERROR", "error": str(e)}

@app.post("/webhook")
async def process_webhook(request: Request):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook"""
    global update_counter
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º secret token –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        secret_token = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω secret token: {secret_token}")
        logger.info(f"üîë –û–∂–∏–¥–∞–µ—Ç—Å—è secret token: {WEBHOOK_SECRET_TOKEN}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º secret token, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if secret_token != WEBHOOK_SECRET_TOKEN:
            logger.warning(f"‚ö†Ô∏è Secret token –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –ø–æ–ª—É—á–µ–Ω='{secret_token}', –æ–∂–∏–¥–∞–µ—Ç—Å—è='{WEBHOOK_SECRET_TOKEN}'")
            logger.warning("‚ö†Ô∏è –ü–†–û–î–û–õ–ñ–ê–ï–ú –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏...")
        else:
            logger.info("‚úÖ Secret token –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        
        json_data = await request.body()
        json_string = json_data.decode('utf-8')
        
        logger.info(f"üì® Webhook –ø–æ–ª—É—á–µ–Ω: {json_string[:150]}...")
        print(f"üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook update...")
        
        update_dict = json.loads(json_string)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º update –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        update_counter += 1
        debug_update = {
            "id": update_counter,
            "timestamp": datetime.now().isoformat(),
            "type": "unknown",
            "data": update_dict
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø update
        if "message" in update_dict:
            debug_update["type"] = "message"
        elif "business_message" in update_dict:
            debug_update["type"] = "business_message"
        elif "business_connection" in update_dict:
            debug_update["type"] = "business_connection"
        elif "edited_business_message" in update_dict:
            debug_update["type"] = "edited_business_message"
        elif "deleted_business_messages" in update_dict:
            debug_update["type"] = "deleted_business_messages"
        else:
            debug_update["type"] = f"other: {list(update_dict.keys())}"
            
        last_updates.append(debug_update)
        logger.info(f"üìä Update #{update_counter} —Ç–∏–ø: {debug_update['type']}")
        
        # === –û–ë–´–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===
        if "message" in update_dict:
            msg = update_dict["message"]
            chat_id = msg["chat"]["id"]
            text = msg.get("text", "") or msg.get("caption", "")
            user_id = msg.get("from", {}).get("id", "unknown")
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            message_types = []
            if msg.get("voice"):
                message_types.append("voice")
            if msg.get("audio"):
                message_types.append("audio")
            if msg.get("document"):
                message_types.append("document")
            if msg.get("text"):
                message_types.append("text")
            if msg.get("video_note"):
                message_types.append("video_note")
            
            logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: —Ç–∏–ø—ã={message_types}, voice={bool(msg.get('voice'))}, audio={bool(msg.get('audio'))}")
            user_name = msg.get("from", {}).get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∞—É–¥–∏–æ
            voice_data = msg.get("voice")
            audio_data = msg.get("audio")
            document_data = msg.get("document")
            is_voice_message = bool(voice_data)
            
            # –ë–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
            if is_voice_message:
                logger.info(f"üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}")
            elif msg.get("audio"):
                logger.info(f"üéµ –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}")
            elif text:
                logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}: {text[:50]}...")
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç rate limit)
                try:
                    import time
                    time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
                    bot.send_chat_action(chat_id, 'typing')
                except Exception as typing_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {typing_error}")
                
                # === –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–õ–û–°–û–í–´–• –ò –ê–£–î–ò–û –°–û–û–ë–©–ï–ù–ò–ô ===
                # –ü–æ –æ–±—Ä–∞–∑—Ü—É artem.integrator: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º ‚Üí —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º text ‚Üí –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
                if (is_voice_message or audio_data or (document_data and document_data.get("mime_type", "").startswith("audio/"))):
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
                    audio_to_process = None
                    audio_type = ""
                    
                    if is_voice_message:
                        audio_to_process = voice_data
                        audio_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ"
                    elif audio_data:
                        audio_to_process = audio_data  
                        audio_type = "–∞—É–¥–∏–æ"
                    elif document_data and document_data.get("mime_type", "").startswith("audio/"):
                        audio_to_process = document_data
                        audio_type = "–∞—É–¥–∏–æ –¥–æ–∫—É–º–µ–Ω—Ç"
                    
                    if audio_to_process and voice_service:
                        try:
                            logger.info(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º {audio_type} —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}")
                            
                            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            transcription_result = await process_voice_transcription(audio_to_process, user_id)
                            
                            if transcription_result and transcription_result.get('success'):
                                # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                                transcribed_text = transcription_result.get('text')
                                logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {transcribed_text}")
                                
                                # –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º text = —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                text = transcribed_text
                                
                                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∏–∂–µ)
                            else:
                                # –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                                error_msg = transcription_result.get('error', '–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏')
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {error_msg}")
                                response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑."
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç rate limit)
                                try:
                                    import time
                                    time.sleep(0.2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                                    bot.send_message(chat_id, response)
                                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≥–æ–ª–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                                except Exception as send_error:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {send_error}")
                                return {"ok": True, "action": "voice_transcription_failed"}
                                
                        except Exception as voice_error:
                            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {voice_error}")
                            response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º."
                            bot.send_message(chat_id, response)
                            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≥–æ–ª–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                            return {"ok": True, "action": "voice_processing_error"}
                    else:
                        response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è."
                        bot.send_message(chat_id, response)
                        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                        return {"ok": True, "action": "voice_service_unavailable"}
                
                # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –ò –¢–ï–ö–°–¢–ê ===
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º response –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
                response = None
                
                if text.startswith("/start"):
                    if AI_ENABLED:
                        response = agent.get_welcome_message()
                    else:
                        response = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ignatova-stroinost-bot –±–æ—Ç!"
                
                elif text.startswith("/voice_debug"):
                    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                    if voice_service:
                        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                        test_voice = {
                            'file_id': 'test_invalid_file_id_12345',
                            'duration': 3,
                            'file_size': 1000
                        }
                        
                        try:
                            result = await process_voice_transcription(test_voice, user_id)
                            
                            response = f"""üîç –¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞:
                            
üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –£—Å–ø–µ—Ö: {result.get('success', False)}
‚Ä¢ –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ—Ç –æ—à–∏–±–∫–∏')}

üí° **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:**
–ï—Å–ª–∏ success=False, —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤.
–ï—Å–ª–∏ success=True, —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ webhook –ª–æ–≥–∏–∫–µ."""
                        except Exception as e:
                            response = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}"
                    else:
                        response = "‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                
                elif text.startswith("/voice_test"):
                    # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                    if voice_service:
                        service_info = voice_service.get_service_info()
                        test_results = await voice_service.test_service()
                        
                        response = f"""üé§ –°—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞:
                        
üìä **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –°–µ—Ä–≤–∏—Å: {service_info['service_name']}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {service_info['status']}
‚Ä¢ –Ø–∑—ã–∫: {service_info['default_language']}
‚Ä¢ –ú–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {service_info['max_duration']}—Å

üîß **–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
‚Ä¢ Telegram: {"‚úÖ" if test_results['telegram_token'] else "‚ùå"}
‚Ä¢ OpenAI: {"‚úÖ" if test_results['openai_key'] else "‚ùå"}
‚Ä¢ Whisper: {"‚úÖ" if test_results['whisper_client'] else "‚ùå"}
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {"‚úÖ" if test_results['whisper_connection'] else "‚ùå"}

üéØ **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:** {"‚úÖ –ì–æ—Ç–æ–≤" if test_results['service_ready'] else "‚ùå –ù–µ –≥–æ—Ç–æ–≤"}

üìù **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:** {', '.join(service_info['supported_formats'][:5])}"""
                    else:
                        response = "‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                
                elif text.startswith("/help"):
                    voice_status = "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è" if voice_service else "‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è"
                    response = f"""‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ ignatova-stroinost-bot:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
/voice_test - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å

üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {voice_status}

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"""
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
                elif text and AI_ENABLED:
                    try:
                        session_id = f"user_{user_id}"
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if agent.zep_client:
                            await agent.ensure_user_exists(f"user_{user_id}", {
                                'first_name': user_name,
                                'email': f'{user_id}@telegram.user'
                            })
                            await agent.ensure_session_exists(session_id, f"user_{user_id}")
                        response = await agent.generate_response(text, session_id, user_name)
                        
                    except Exception as ai_error:
                        logger.error(f"–û—à–∏–±–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {ai_error}")
                        response = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞."
                    
                elif text:
                    # Fallback –µ—Å–ª–∏ AI –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
                    response = f"üëã {user_name}, –ø–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç. –ú–∏–Ω—É—Ç–æ—á–∫—É!"
                else:
                    return {"ok": True, "action": "no_action"}
                    
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None)
                if response:
                    bot.send_message(chat_id, response)
                    logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
                    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
                else:
                    logger.warning(f"‚ö†Ô∏è Response –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: {text[:50]}")
                    return {"ok": True, "action": "no_response_generated"}
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞.")
        
        # === BUSINESS –°–û–û–ë–©–ï–ù–ò–Ø ===
        elif "business_message" in update_dict:
            bus_msg = update_dict["business_message"]
            
            chat_id = bus_msg["chat"]["id"]
            text = bus_msg.get("text", "") or bus_msg.get("caption", "")
            user_id = bus_msg.get("from", {}).get("id", "unknown")
            business_connection_id = bus_msg.get("business_connection_id")
            user_name = bus_msg.get("from", {}).get("first_name", "–ö–ª–∏–µ–Ω—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Business API
            voice_data = bus_msg.get("voice")
            is_voice_message = bool(voice_data)
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Business API
            if is_voice_message:
                logger.info(f"üé§ Business: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {voice_data}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–∫–∂–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∞—É–¥–∏–æ –≤ Business API
            audio_data = bus_msg.get("audio")
            document_data = bus_msg.get("document")
            if audio_data:
                logger.info(f"üéµ Business: –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {audio_data}")
            if document_data and document_data.get("mime_type", "").startswith("audio/"):
                logger.info(f"üìé Business: –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ –¥–æ–∫—É–º–µ–Ω—Ç: {document_data}")
            
            # üö´ –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
            if business_connection_id and business_connection_id in business_owners:
                owner_id = business_owners[business_connection_id]
                if str(user_id) == str(owner_id):
                    logger.info(f"üö´ –ò–ì–ù–û–†–ò–†–£–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {user_name} (ID: {user_id})")
                    return {"ok": True, "action": "ignored_owner_message", "reason": "message_from_business_owner"}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º business —Å–æ–æ–±—â–µ–Ω–∏—è (–≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ)
            if text or is_voice_message:
                try:
                    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É business message: {'voice' if is_voice_message else 'text'}, chat_id={chat_id}")
                    
                    if AI_ENABLED:
                        logger.info(f"ü§ñ AI –≤–∫–ª—é—á–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
                        session_id = f"business_{user_id}"
                        
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if agent.zep_client:
                            await agent.ensure_user_exists(f"business_{user_id}", {
                                'first_name': user_name,
                                'email': f'{user_id}@business.telegram.user'
                            })
                            await agent.ensure_session_exists(session_id, f"business_{user_id}")
                        
                        # === –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–õ–û–°–û–í–´–• –ò –ê–£–î–ò–û BUSINESS –°–û–û–ë–©–ï–ù–ò–ô ===
                        # –ü–æ –æ–±—Ä–∞–∑—Ü—É artem.integrator: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º ‚Üí —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º text ‚Üí –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
                        if (is_voice_message or audio_data or (document_data and document_data.get("mime_type", "").startswith("audio/"))):
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
                            audio_to_process = None
                            audio_type = ""
                            
                            if is_voice_message:
                                audio_to_process = voice_data
                                audio_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ business"
                            elif audio_data:
                                audio_to_process = audio_data
                                audio_type = "–∞—É–¥–∏–æ business"
                            elif document_data and document_data.get("mime_type", "").startswith("audio/"):
                                audio_to_process = document_data
                                audio_type = "–∞—É–¥–∏–æ –¥–æ–∫—É–º–µ–Ω—Ç business"
                            
                            if audio_to_process and voice_service:
                                try:
                                    logger.info(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º {audio_type} —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}")
                                    
                                    # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    transcription_result = await process_voice_transcription(audio_to_process, user_id)
                                    
                                    if transcription_result and transcription_result.get('success'):
                                        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                                        transcribed_text = transcription_result.get('text')
                                        logger.info(f"‚úÖ Business —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {transcribed_text}")
                                        
                                        # –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º text = —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                        text = transcribed_text
                                        
                                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∏–∂–µ –≤ –±–ª–æ–∫–µ AI)
                                    else:
                                        # –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                                        error_msg = transcription_result.get('error', '–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏')
                                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ business —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {error_msg}")
                                        response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º."
                                        
                                except Exception as voice_error:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ business –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {voice_error}")
                                    response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º."
                            else:
                                response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è."
                        
                        # === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• BUSINESS –°–û–û–ë–©–ï–ù–ò–ô (–≤–∫–ª—é—á–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ) ===
                        if text:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑ –≥–æ–ª–æ—Å–∞)
                            response = await agent.generate_response(text, session_id, user_name)
                            logger.info(f"‚úÖ AI –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {response[:100]}...")
                    else:
                        logger.info(f"ü§ñ AI –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                        if is_voice_message:
                            response = f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º."
                        else:
                            response = f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –ü–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç!"
                    
                    # –î–ª—è business_message –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    logger.info(f"üì§ –ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É {user_name}...")
                    if business_connection_id:
                        result = send_business_message(chat_id, response, business_connection_id)
                        if result:
                            logger.info(f"‚úÖ Business –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É –≤ —á–∞—Ç {chat_id}")
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Business API")
                    else:
                        bot.send_message(chat_id, response)
                        logger.warning(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (fallback)")
                    
                    print(f"‚úÖ Business –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {user_name}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ business —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    logger.error(f"Traceback:\n{traceback.format_exc()}")
                    
                    # –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –¢–û–ñ–ï —á–µ—Ä–µ–∑ Business API!
                    try:
                        error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞."
                        
                        if business_connection_id:
                            result = send_business_message(chat_id, error_message, business_connection_id)
                            if result:
                                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Business API")
                            else:
                                bot.send_message(chat_id, error_message)
                                logger.warning(f"‚ö†Ô∏è Business API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º")
                        else:
                            bot.send_message(chat_id, error_message)
                            logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ë–ï–ó Business API (–Ω–µ—Ç connection_id)")
                            
                    except Exception as send_error:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
        
        # === BUSINESS CONNECTION ===
        elif "business_connection" in update_dict:
            conn = update_dict["business_connection"]
            is_enabled = conn.get("is_enabled", False)
            connection_id = conn.get("id")
            user_info = conn.get("user", {})
            user_name = user_info.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            owner_user_id = user_info.get("id")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ Business Connection –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            if connection_id and owner_user_id:
                if is_enabled:
                    business_owners[connection_id] = owner_user_id
                    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü Business Connection: {user_name} (ID: {owner_user_id}) –¥–ª—è connection_id: {connection_id}")
                else:
                    business_owners.pop(connection_id, None)
                    logger.info(f"‚ùå –£–¥–∞–ª–µ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü Business Connection: {user_name} (connection_id: {connection_id})")
            
            status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if is_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            logger.info(f"{status} –∫ Business –∞–∫–∫–∞—É–Ω—Ç—É: {user_name}")
            logger.info(f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö Business Connection: {len(business_owners)}")
        
        return {"ok": True, "status": "processed", "update_id": update_counter}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return {"ok": False, "error": str(e)}

@app.get("/debug/logs")
async def get_recent_logs():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        import os
        log_file = "logs/bot.log"
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
                recent_lines = lines[-20:] if len(lines) > 20 else lines
                return {
                    "status": "success",
                    "logs": [line.strip() for line in recent_lines],
                    "total_lines": len(lines)
                }
        else:
            return {
                "status": "error",
                "error": "Log file not found"
            }
    except Exception as e:
        return {"status": "error", "error": str(e)}

@app.get("/debug/zep-status") 
async def get_zep_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Zep Memory"""
    if not AI_ENABLED:
        return {
            "status": "error",
            "error": "AI –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω",
            "zep_client_initialized": False,
            "memory_mode": "Unavailable"
        }
    
    try:
        zep_api_key = os.getenv('ZEP_API_KEY', '')
        zep_client = agent.zep_client if hasattr(agent, 'zep_client') else None
        
        return {
            "status": "success",
            "zep_api_key_set": bool(zep_api_key and zep_api_key != "test_key"),
            "zep_api_key_length": len(zep_api_key) if zep_api_key else 0,
            "zep_api_key_preview": f"{zep_api_key[:8]}..." if zep_api_key else "Not set",
            "zep_client_initialized": zep_client is not None,
            "memory_mode": "Zep Cloud" if zep_client else "Local Memory",
            "ai_agent_loaded": True,
            "current_time": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "status": "error", 
            "error": str(e),
            "zep_client_initialized": False,
            "memory_mode": "Error"
        }

@app.get("/debug/voice-logs")
async def get_voice_logs():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    try:
        import os
        log_file = "logs/bot.log"
        voice_lines = []
        
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                # –ò—â–µ–º –ª–æ–≥–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥–æ–ª–æ—Å–æ–º
                voice_keywords = ['–≥–æ–ª–æ—Å', 'voice', 'üé§', 'üîë', 'file_id', '—Ç—Ä–∞–Ω—Å–∫—Ä–∏', 'whisper', 'audio']
                for line in lines:
                    if any(keyword.lower() in line.lower() for keyword in voice_keywords):
                        voice_lines.append(line.strip())
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –∑–∞–ø–∏—Å–µ–π –æ –≥–æ–ª–æ—Å–µ
                recent_voice_lines = voice_lines[-30:] if len(voice_lines) > 30 else voice_lines
                
                return {
                    "status": "success",
                    "voice_logs": recent_voice_lines,
                    "total_voice_logs": len(voice_lines),
                    "voice_service_status": "active" if voice_service else "inactive"
                }
        else:
            return {
                "status": "error",
                "error": "Log file not found"
            }
    except Exception as e:
        return {"status": "error", "error": str(e)}

@app.get("/debug/production-status")
async def production_status():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        import os
        import sys
        from datetime import datetime
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ OpenAI –∫–ª—é—á–∞
        openai_key_info = {
            "exists": bool(OPENAI_API_KEY),
            "length": len(OPENAI_API_KEY) if OPENAI_API_KEY else 0,
            "starts_with": OPENAI_API_KEY[:10] + "..." if OPENAI_API_KEY and len(OPENAI_API_KEY) > 10 else "None",
            "format_check": OPENAI_API_KEY.startswith("sk-") if OPENAI_API_KEY else False
        }
        
        status = {
            "timestamp": datetime.now().isoformat(),
            "voice_service": {
                "initialized": voice_service is not None,
                "telegram_token": bool(TELEGRAM_BOT_TOKEN),
                "openai_key": bool(OPENAI_API_KEY),
                "openai_key_details": openai_key_info
            },
            "ai_agent": {
                "enabled": AI_ENABLED,
                "initialized": agent is not None
            },
            "environment": {
                "python_version": sys.version,
                "working_directory": os.getcwd(),
                "log_file_exists": os.path.exists("logs/bot.log")
            },
            "recent_errors": []
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–∑ –ª–æ–≥–æ–≤
        if os.path.exists("logs/bot.log"):
            with open("logs/bot.log", 'r', encoding='utf-8') as f:
                lines = f.readlines()
                error_lines = []
                for line in lines[-50:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
                    if 'ERROR' in line or '‚ùå' in line or 'Exception' in line:
                        error_lines.append(line.strip())
                status["recent_errors"] = error_lines[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—à–∏–±–æ–∫
        
        return {"status": "success", "data": status}
        
    except Exception as e:
        return {"status": "error", "error": str(e)}

@app.get("/debug/test-openai")
async def test_openai():
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API"""
    try:
        from datetime import datetime
        
        if not OPENAI_API_KEY:
            return {"status": "error", "error": "OpenAI API key not provided"}
        
        import openai
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API
        try:
            client = openai.OpenAI(api_key=OPENAI_API_KEY)
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API - —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            models = client.models.list()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Whisper
            whisper_available = any("whisper" in model.id for model in models.data)
            
            return {
                "status": "success",
                "api_key_valid": True,
                "whisper_available": whisper_available,
                "total_models": len(models.data),
                "test_timestamp": datetime.now().isoformat()
            }
            
        except openai.AuthenticationError:
            return {
                "status": "error", 
                "error": "Authentication failed - invalid API key",
                "api_key_valid": False
            }
        except openai.APIError as e:
            return {
                "status": "error",
                "error": f"OpenAI API error: {str(e)}",
                "api_key_valid": "unknown"
            }
        except Exception as e:
            return {
                "status": "error",
                "error": f"Connection error: {str(e)}",
                "api_key_valid": "unknown"
            }
            
    except Exception as e:
        return {"status": "error", "error": str(e)}

@app.get("/debug/webhook-info")
async def webhook_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook"""
    try:
        import requests
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        webhook_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getWebhookInfo"
        response = requests.get(webhook_url)
        webhook_data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        allowed_updates = webhook_data.get("result", {}).get("allowed_updates", [])
        
        return {
            "status": "success",
            "webhook_info": webhook_data.get("result", {}),
            "voice_allowed": "message" in allowed_updates or len(allowed_updates) == 0,
            "all_allowed_updates": allowed_updates,
            "voice_processing_enabled": voice_service is not None
        }
        
    except Exception as e:
        return {"status": "error", "error": str(e)}

@app.get("/debug/prompt")
async def get_current_prompt():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö"""
    try:
        if AI_ENABLED and agent:
            instruction = agent.instruction
            return {
                "status": "success",
                "last_updated": instruction.get("last_updated", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "system_instruction_length": len(instruction.get("system_instruction", "")),
                "welcome_message": instruction.get("welcome_message", ""),
                "ai_enabled": True
            }
        else:
            return {
                "status": "error",
                "error": "AI Agent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                "ai_enabled": False
            }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return {"status": "error", "error": str(e)}

@app.post("/admin/reload-instructions")
async def reload_instructions():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if AI_ENABLED and agent:
            old_updated = agent.instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            agent.reload_instruction()
            new_updated = agent.instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            changed = old_updated != new_updated
            
            return {
                "status": "success",
                "changed": changed,
                "old_updated": old_updated,
                "new_updated": new_updated,
                "message": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã" if changed else "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"
            }
        else:
            return {
                "status": "error",
                "error": "AI Agent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return {"status": "error", "error": str(e)}

@app.post("/admin/update-instructions")
async def update_instructions(request: Request):
    """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API"""
    try:
        if not AI_ENABLED or not agent:
            return {
                "status": "error",
                "error": "AI Agent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        instruction_data = await request.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ["system_instruction", "welcome_message", "settings"]
        for field in required_fields:
            if field not in instruction_data:
                return {
                    "status": "error",
                    "error": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}"
                }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        instruction_data["last_updated"] = datetime.now().isoformat()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        import json
        from bot.config import INSTRUCTION_FILE
        with open(INSTRUCTION_FILE, 'w', encoding='utf-8') as f:
            json.dump(instruction_data, f, ensure_ascii=False, indent=2)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤ –∞–≥–µ–Ω—Ç–µ
        old_updated = agent.instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫–µ—à –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
        agent.instruction = agent._load_instruction()
        
        new_updated = agent.instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ API: {old_updated} -> {new_updated}")
        
        return {
            "status": "success",
            "changed": True,
            "old_updated": old_updated,
            "new_updated": new_updated,
            "message": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ API"
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —á–µ—Ä–µ–∑ API: {e}")
        return {"status": "error", "error": str(e)}

@app.get("/admin/get-instructions")
async def get_current_instructions():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –±–æ—Ç–∞"""
    try:
        if not AI_ENABLED or not agent:
            return {
                "status": "error",
                "error": "AI Agent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            }
        
        return {
            "status": "success",
            "instructions": agent.instruction,
            "loaded_at": agent.instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {e}")
        return {"status": "error", "error": str(e)}

@app.post("/admin/test-response")
async def test_bot_response(request: Request):
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    try:
        if not AI_ENABLED or not agent:
            return {
                "status": "error",
                "error": "AI Agent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = await request.json()
        test_message = data.get("message", "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await agent.generate_response(
            user_message=test_message,
            session_id="test_admin_session",
            user_name="Admin"
        )
        
        return {
            "status": "success",
            "test_message": test_message,
            "bot_response": response,
            "system_instruction_used": agent.instruction.get("system_instruction", "")[:200] + "...",
            "instruction_timestamp": agent.instruction.get("last_updated", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
        return {"status": "error", "error": str(e)}

@app.on_event("startup")
async def startup():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\n" + "="*50)
    print("üöÄ ignatova-stroinost-bot BOT WEBHOOK SERVER")
    print("="*50)
    
    # –û—á–∏—â–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        bot.delete_webhook()
        print("üßπ Webhook –æ—á–∏—â–µ–Ω")
    except:
        pass
    
    try:
        bot_info = bot.get_me()
        print(f"ü§ñ –ë–æ—Ç: @{bot_info.username}")
        print(f"üìä ID: {bot_info.id}")
        print(f"üìõ –ò–º—è: {bot_info.first_name}")
        print("üîó –†–µ–∂–∏–º: WEBHOOK ONLY")
        print("‚ùå Polling: –û–¢–ö–õ–Æ–ß–ï–ù")
        print(f"ü§ñ AI: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù' if AI_ENABLED else '‚ùå –û–¢–ö–õ–Æ–ß–ï–ù'}")
        print(f"üîë OpenAI API: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if os.getenv('OPENAI_API_KEY') else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        print("="*50)
        logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –í–°–ï–ì–î–ê –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        print("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook...")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            webhook_url = "https://ignatova-stroinost-bot-production.up.railway.app/webhook"
            result = bot.set_webhook(
                url=webhook_url,
                secret_token=WEBHOOK_SECRET_TOKEN,
                allowed_updates=[
                    "message",
                    "business_connection", 
                    "business_message",
                    "edited_business_message",
                    "deleted_business_messages"
                ]
            )
            
            if result:
                print(f"‚úÖ Webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {webhook_url}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                logger.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")

@app.on_event("shutdown")
async def shutdown():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ignatova-stroinost-bot Bot Webhook Server")
    print("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8000))
    print(f"üåê –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    uvicorn.run(app, host="0.0.0.0", port=port)