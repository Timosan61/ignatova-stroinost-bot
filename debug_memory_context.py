#!/usr/bin/env python3
"""
üîç –û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫ –±–æ—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot.agent import TextilProAgent

async def debug_memory_context():
    print("=" * 60)
    print("üîç –û–¢–õ–ê–î–ö–ê –ö–û–ù–¢–ï–ö–°–¢–ê –ü–ê–ú–Ø–¢–ò –ë–û–¢–ê")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = TextilProAgent()
    
    print(f"\nüìä –°–¢–ê–¢–£–° –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:")
    print(f"   Zep –∫–ª–∏–µ–Ω—Ç: {'‚úÖ –î–∞' if agent.zep_client else '‚ùå –ù–µ—Ç'}")
    print(f"   OpenAI: {'‚úÖ –î–∞' if agent.openai_client else '‚ùå –ù–µ—Ç'}")
    print(f"   Anthropic: {'‚úÖ –î–∞' if agent.anthropic_client else '‚ùå –ù–µ—Ç'}")
    
    if not agent.zep_client:
        print("‚ùå Zep –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    test_session_id = "conversation_test_12345"
    
    print(f"\nüß† –¢–ï–°–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–ê:")
    print(f"   Session ID: {test_session_id}")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–∫ –≤ –±–æ—Ç–µ
    print("\n1Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï ZEP –ö–û–ù–¢–ï–ö–°–¢–ê:")
    try:
        zep_context = await agent.get_zep_memory_context(test_session_id)
        print(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(zep_context)}")
        if zep_context:
            print(f"üìÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {zep_context[:300]}...")
        else:
            print("üìÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        zep_context = ""
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    print("\n2Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–°–õ–ï–î–ù–ò–• –°–û–û–ë–©–ï–ù–ò–ô:")
    try:
        zep_history = await agent.get_zep_recent_messages(test_session_id, limit=6)
        print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞, –¥–ª–∏–Ω–∞: {len(zep_history)}")
        if zep_history:
            print(f"üìù –ò—Å—Ç–æ—Ä–∏—è:\n{zep_history}")
        else:
            print("üìù –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        zep_history = ""
    
    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –≤ –±–æ—Ç–µ
    print("\n3Ô∏è‚É£ –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–ù–û–ì–û –ü–†–û–ú–ü–¢–ê:")
    
    system_prompt = agent.instruction.get("system_instruction", "")
    print(f"üìã –ë–∞–∑–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ –≤ generate_response
    if zep_context:
        system_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤:\n{zep_context}"
        print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–º–ø—Ç")
    else:
        print("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω (–ø—É—Å—Ç)")
    
    if zep_history:
        system_prompt += f"\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{zep_history}"
        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ–º–ø—Ç")
    else:
        print("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–ø—É—Å—Ç–∞)")
    
    print(f"\nüìè –ò–¢–û–ì–û–í–´–ô –ü–†–û–ú–ü–¢:")
    print(f"   –û–±—â–∞—è –¥–ª–∏–Ω–∞: {len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
    print("\n4Ô∏è‚É£ –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–í–ï–¢–ê:")
    test_question = "–û —á–µ–º –º—ã —Å —Ç–æ–±–æ–π –≥–æ–≤–æ—Ä–∏–ª–∏ –≤—á–µ—Ä–∞? –ù–∞–ø–æ–º–Ω–∏ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"
    
    try:
        print(f"‚ùì –í–æ–ø—Ä–æ—Å: {test_question}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –ø—Ä–æ–º–ø—Ç–µ
        key_words = ["—Ä—É–±–∞—à–∫", "100", "—Ö–ª–æ–ø–æ–∫", "–±–µ–ª", "–ª–æ–≥–æ—Ç–∏–ø", "15000"]
        found_words = []
        for word in key_words:
            if word.lower() in system_prompt.lower():
                found_words.append(word)
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–µ: {len(found_words)}/{len(key_words)}")
        print(f"   –ù–∞–π–¥–µ–Ω—ã: {found_words}")
        
        if len(found_words) >= 4:
            print("‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≤—á–µ—Ä–∞—à–Ω–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ")
        else:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –±–æ—Ç –º–æ–∂–µ—Ç –Ω–µ –ø–æ–º–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏")
        
        # –ü—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å LLM)
        if agent.openai_client or agent.anthropic_client:
            print("\nü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç...")
            response = await agent.generate_response(test_question, test_session_id, "–ê–Ω–Ω–∞")
            print(f"üìù –û—Ç–≤–µ—Ç –±–æ—Ç–∞: {response[:200]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç –ª–∏ –±–æ—Ç –¥–µ—Ç–∞–ª–∏
            response_lower = response.lower()
            mentioned_details = []
            for word in key_words:
                if word.lower() in response_lower:
                    mentioned_details.append(word)
            
            print(f"üéØ –£–ø–æ–º—è–Ω—É—Ç–æ –¥–µ—Ç–∞–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–µ: {len(mentioned_details)}/{len(key_words)}")
            if len(mentioned_details) >= 3:
                print("‚úÖ –ë–æ—Ç —Ö–æ—Ä–æ—à–æ –ø–æ–º–Ω–∏—Ç –¥–µ—Ç–∞–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
            else:
                print("‚ö†Ô∏è –ë–æ—Ç –ø–ª–æ—Ö–æ –ø–æ–º–Ω–∏—Ç –¥–µ—Ç–∞–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
        else:
            print("‚ö†Ô∏è LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    print("\n" + "=" * 60)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)

# –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
if __name__ == "__main__":
    asyncio.run(debug_memory_context())