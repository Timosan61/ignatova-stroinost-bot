#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è file_id –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
sys.path.append('.')

async def test_file_id_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ file_id –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö"""
    
    print("=== –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø FILE_ID ===")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ webhook
    import webhook
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ Telegram
    test_cases = [
        {
            "name": "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (voice)",
            "data": {
                'file_id': 'AwACAgIAAxkBAAICumY1234567890abcdefghijklmnop',
                'file_unique_id': 'AgADCgAB1234567890',
                'duration': 3,
                'file_size': 12345
            }
        },
        {
            "name": "–ê—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (audio) - –∫–∞–∫ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ msg.get('audio')",
            "data": {
                'file_id': 'CQACAgIAAxkBAAICumY1234567890abcdefghijklmnop',
                'file_unique_id': 'AgADCgAB1234567890', 
                'duration': 5,
                'file_size': 23456,
                'performer': 'Test Artist',
                'title': 'Test Song'
            }
        },
        {
            "name": "–ê—É–¥–∏–æ –¥–æ–∫—É–º–µ–Ω—Ç (document)",
            "data": {
                'file_id': 'BQACAgIAAxkBAAICumY1234567890abcdefghijklmnop',
                'file_unique_id': 'AgADCgAB1234567890',
                'file_name': 'voice_message.ogg',
                'mime_type': 'audio/ogg',
                'file_size': 34567
            }
        },
        {
            "name": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º audio",
            "data": {
                'audio': {
                    'file_id': 'CQACAgIAAxkBAAICumY1234567890abcdefghijklmnop',
                    'duration': 5,
                    'file_size': 23456
                }
            }
        }
    ]
    
    for test_case in test_cases:
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test_case['name']}")
        data = test_case['data']
        print(f"üìã –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            result = await webhook.process_voice_transcription(data, 12345)
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: success={result.get('success')}, error={result.get('error')}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    asyncio.run(test_file_id_extraction())