"""
ü§ñ ignatova-stroinost-bot - –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä

–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.
–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∏ Business —Å–æ–æ–±—â–µ–Ω–∏–π  
- AI-powered –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ OpenAI/Anthropic
- –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ Zep Cloud
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- Debug endpoints –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import os
import sys
import logging
import asyncio
from datetime import datetime
from fastapi import FastAPI, Request
import telebot

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
AI_ENABLED = False
agent = None
message_handler = None
business_handler = None

print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ ignatova-stroinost-bot (Refactored)...")

# –ò–º–ø–æ—Ä—Ç AI –º–æ–¥—É–ª–µ–π
try:
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º TextilProAgent...")
    from bot.agent import TextilProAgent
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TextilProAgent...")
    agent = TextilProAgent()
    AI_ENABLED = True
    print("‚úÖ AI Agent –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ö†Ô∏è AI Agent –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω (ImportError): {e}")
    print(f"‚ö†Ô∏è –î–µ—Ç–∞–ª–∏ ImportError: {type(e).__name__}: {str(e)}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AI Agent: {e}")
    print(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}: {str(e)}")
    import traceback
    print(f"‚ùå –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–æ–∫:\n{traceback.format_exc()}")

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
try:
    from bot.handlers.message_handler import MessageHandler
    from bot.handlers.business_handler import BusinessHandler
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEBHOOK_SECRET_TOKEN = os.getenv("WEBHOOK_SECRET_TOKEN", "QxLZquGScgx1QmwsuUSfJU6HpyTUJoHf2XD4QisrjCk")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

print(f"‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω: {TELEGRAM_BOT_TOKEN[:20]}...")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
if AI_ENABLED and agent:
    message_handler = MessageHandler(bot, agent)
    business_handler = BusinessHandler(TELEGRAM_BOT_TOKEN, agent)
else:
    message_handler = MessageHandler(bot, None)
    business_handler = BusinessHandler(TELEGRAM_BOT_TOKEN, None)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)
logger.info("üöÄ ignatova-stroinost-bot Refactored started")
logger.info(f"ü§ñ Bot token: {TELEGRAM_BOT_TOKEN[:20]}...")
logger.info(f"üîÑ AI Agent enabled: {AI_ENABLED}")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="ignatova-stroinost-bot",
    description="Telegram bot for ignatova-stroinost company",
    version="2.0.0-refactored"
)

# –û—Å–Ω–æ–≤–Ω—ã–µ endpoints
@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –±–æ—Ç–∞"""
    return {
        "status": "üü¢ ONLINE",
        "service": "ignatova-stroinost-bot Bot Webhook",
        "version": "2.0.0-refactored",
        "bot": "@ignatova_stroinost_bot",
        "bot_id": 7790878041,
        "mode": "WEBHOOK_ONLY",
        "ai_status": "‚úÖ ENABLED" if AI_ENABLED else "‚ùå DISABLED",
        "openai_configured": bool(agent and agent.openai_client) if AI_ENABLED else False,
        "anthropic_configured": bool(agent and agent.anthropic_client) if AI_ENABLED else False,
        "voice_status": "‚úÖ ENABLED" if AI_ENABLED and agent and hasattr(agent, 'voice_service') else "‚ùå DISABLED",
        "zep_status": "‚úÖ ENABLED" if AI_ENABLED and agent and agent.zep_client else "‚ùå DISABLED",
        "endpoints": {
            "webhook_info": "/webhook/info",
            "set_webhook": "/webhook/set",
            "debug_status": "/debug/zep-status",
            "business_owners": "/debug/business-owners",
            "memory_check": "/debug/memory/{session_id}"
        },
        "architecture": "Modular (Refactored)",
        "hint": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /webhook/set –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook"
    }

@app.post("/webhook")
async def process_webhook(request: Request):
    """–ì–ª–∞–≤–Ω—ã–π webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    try:
        update_dict = await request.json()
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω update: {update_dict.get('update_id', 'unknown')}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Business Connection
        if "business_connection" in update_dict:
            conn_data = update_dict["business_connection"]
            return business_handler.handle_business_connection(conn_data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Business —Å–æ–æ–±—â–µ–Ω–∏–π
        elif "business_message" in update_dict:
            message_data = update_dict["business_message"]
            return await business_handler.handle_business_message(message_data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        elif "message" in update_dict:
            message_data = update_dict["message"]
            
            # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if "voice" in message_data:
                return await message_handler.handle_voice_message(message_data)
            # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            elif "text" in message_data:
                return await message_handler.handle_regular_message(message_data)
            else:
                logger.info("üìã –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞/–≥–æ–ª–æ—Å–∞")
                return {"ok": True, "action": "ignored_non_text_message"}
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update
        else:
            logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update: {list(update_dict.keys())}")
            return {"ok": True, "action": "ignored_unknown_update"}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return {"ok": False, "error": str(e)}

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "2.0.0-refactored",
        "ai_enabled": AI_ENABLED,
        "components": {
            "telegram_bot": bool(bot),
            "ai_agent": bool(agent),
            "message_handler": bool(message_handler),
            "business_handler": bool(business_handler),
            "zep_memory": bool(agent and agent.zep_client) if AI_ENABLED else False
        }
    }

# Webhook —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
@app.get("/webhook/set")
async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    webhook_url = os.getenv('WEBHOOK_URL', 'https://ignatova-stroinost-bot-production.up.railway.app/webhook')
    
    try:
        success = bot.set_webhook(
            url=webhook_url,
            secret_token=WEBHOOK_SECRET_TOKEN,
            allowed_updates=[
                "message", 
                "business_connection", 
                "business_message",
                "edited_business_message", 
                "deleted_business_messages"
            ]
        )
        
        if success:
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return {
                "status": "success",
                "webhook_url": webhook_url,
                "message": "Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            }
        else:
            return {
                "status": "error",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook"
            }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return {
            "status": "error",
            "error": str(e)
        }

@app.get("/webhook/info")
async def webhook_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook"""
    try:
        info = bot.get_webhook_info()
        return {
            "url": info.url,
            "has_custom_certificate": info.has_custom_certificate,
            "pending_update_count": info.pending_update_count,
            "last_error_date": info.last_error_date,
            "last_error_message": info.last_error_message,
            "max_connections": info.max_connections,
            "allowed_updates": info.allowed_updates
        }
    except Exception as e:
        return {"error": str(e)}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ debug endpoints
try:
    from bot.api.debug_endpoints import create_debug_router
    debug_router = create_debug_router(agent, business_handler)
    app.include_router(debug_router)
    print("‚úÖ Debug endpoints –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è debug endpoints: {e}")

# Startup —Å–æ–±—ã—Ç–∏—è
@app.on_event("startup")
async def startup():
    """–°–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üéØ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    webhook_url = os.getenv('WEBHOOK_URL')
    if webhook_url:
        try:
            success = bot.set_webhook(
                url=f"{webhook_url}/webhook",
                secret_token=WEBHOOK_SECRET_TOKEN,
                allowed_updates=[
                    "message", 
                    "business_connection", 
                    "business_message"
                ]
            )
            if success:
                logger.info(f"‚úÖ Webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}/webhook")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

@app.on_event("shutdown")
async def shutdown():
    """–°–æ–±—ã—Ç–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("üõë FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)