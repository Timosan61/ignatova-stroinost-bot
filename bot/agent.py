import json
import asyncio
import logging
from datetime import datetime
from typing import Optional, Dict, Any

import openai
import anthropic
from zep_cloud.client import AsyncZep
from zep_cloud.types import Message

from .config import (
    INSTRUCTION_FILE, OPENAI_API_KEY, ANTHROPIC_API_KEY, OPENAI_MODEL, 
    ANTHROPIC_MODEL, ZEP_API_KEY, VOICE_ENABLED, TELEGRAM_BOT_TOKEN
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class TextilProAgent:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        self.voice_service = None
        if VOICE_ENABLED and TELEGRAM_BOT_TOKEN:
            try:
                from .voice import VoiceService
                self.voice_service = VoiceService(TELEGRAM_BOT_TOKEN, OPENAI_API_KEY)
                print("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {e}")
                self.voice_service = None
        else:
            if not VOICE_ENABLED:
                print("‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω (OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            if not TELEGRAM_BOT_TOKEN:
                print("‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω (TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω)")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ API –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω
        if OPENAI_API_KEY:
            try:
                self.openai_client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY)
                print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")
                self.openai_client = None
        else:
            self.openai_client = None
            print("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Anthropic –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ API –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω
        if ANTHROPIC_API_KEY:
            try:
                self.anthropic_client = anthropic.AsyncAnthropic(api_key=ANTHROPIC_API_KEY)
                print("‚úÖ Anthropic –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Anthropic: {e}")
                self.anthropic_client = None
        else:
            self.anthropic_client = None
            print("‚ö†Ô∏è Anthropic API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω LLM –¥–æ—Å—Ç—É–ø–µ–Ω
        if not self.openai_client and not self.anthropic_client:
            print("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω LLM –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Zep –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ API –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω
        if ZEP_API_KEY and ZEP_API_KEY != "test_key":
            try:
                self.zep_client = AsyncZep(api_key=ZEP_API_KEY)
                print(f"‚úÖ Zep –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–ª—é—á–æ–º –¥–ª–∏–Ω–æ–π {len(ZEP_API_KEY)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"üîë Zep API Key –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {ZEP_API_KEY[:8]}...")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Zep –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                self.zep_client = None
        else:
            self.zep_client = None
            if not ZEP_API_KEY:
                print("‚ö†Ô∏è ZEP_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å")
            else:
                print(f"‚ö†Ô∏è ZEP_API_KEY –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 'test_key', –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å")
        self.instruction = self._load_instruction()
        self.user_sessions = {}  # –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏
    
    def _load_instruction(self) -> Dict[str, Any]:
        try:
            with open(INSTRUCTION_FILE, 'r', encoding='utf-8') as f:
                instruction = json.load(f)
                logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {INSTRUCTION_FILE}")
                logger.info(f"üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                logger.info(f"üìè –î–ª–∏–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {len(instruction.get('system_instruction', ''))}")
                print(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {INSTRUCTION_FILE}")
                print(f"üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                return instruction
        except FileNotFoundError:
            logger.warning(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª {INSTRUCTION_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.")
            print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª {INSTRUCTION_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.")
            return {
                "system_instruction": "–í—ã - –ø–æ–º–æ—â–Ω–∏–∫ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Textil PRO.",
                "welcome_message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                "last_updated": datetime.now().isoformat()
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {e}")
            return {
                "system_instruction": "–í—ã - –ø–æ–º–æ—â–Ω–∏–∫ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Textil PRO.",
                "welcome_message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                "last_updated": datetime.now().isoformat()
            }
    
    def reload_instruction(self):
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π...")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π...")
        old_updated = self.instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        self.instruction = self._load_instruction()
        new_updated = self.instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        if old_updated != new_updated:
            logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {old_updated} -> {new_updated}")
            print(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {old_updated} -> {new_updated}")
        else:
            logger.info("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
            print("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
    
    async def add_to_zep_memory(self, session_id: str, user_message: str, bot_response: str, user_name: str = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Zep Memory —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.zep_client:
            print(f"‚ö†Ô∏è Zep –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å –¥–ª—è {session_id}")
            self.add_to_local_session(session_id, user_message, bot_response)
            return False
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID –¥–ª—è —Ä–æ–ª–∏
            user_role = user_name if user_name else f"User_{session_id.split('_')[-1][:6]}"
            
            messages = [
                Message(
                    role=user_role,  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ generic "user"
                    role_type="user",
                    content=user_message
                ),
                Message(
                    role="–ê–Ω–∞—Å—Ç–∞—Å–∏—è",  # –ò–º—è –±–æ—Ç–∞-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
                    role_type="assistant",
                    content=bot_response
                )
            ]
            
            await self.zep_client.memory.add(session_id=session_id, messages=messages)
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Zep Cloud –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            print(f"   üìù User: {user_message[:50]}...")
            print(f"   ü§ñ Bot: {bot_response[:50]}...")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Zep: {type(e).__name__}: {e}")
            # Fallback: –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
            self.add_to_local_session(session_id, user_message, bot_response)
            return False
    
    async def get_zep_memory_context(self, session_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Zep Memory"""
        if not self.zep_client:
            print(f"‚ö†Ô∏è Zep –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è {session_id}")
            return self.get_local_session_history(session_id)
            
        try:
            memory = await self.zep_client.memory.get(session_id=session_id)
            context = memory.context if memory.context else ""
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Zep –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}, –¥–ª–∏–Ω–∞: {len(context)}")
            return context
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ Zep: {type(e).__name__}: {e}")
            return self.get_local_session_history(session_id)
    
    async def get_zep_recent_messages(self, session_id: str, limit: int = 6) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Zep Memory"""
        try:
            memory = await self.zep_client.memory.get(session_id=session_id)
            if not memory.messages:
                return ""
            
            recent_messages = memory.messages[-limit:]
            formatted_messages = []
            
            for msg in recent_messages:
                role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg.role_type == "user" else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                formatted_messages.append(f"{role}: {msg.content}")
            
            return "\n".join(formatted_messages)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Zep: {e}")
            return self.get_local_session_history(session_id)
    
    def add_to_local_session(self, session_id: str, user_message: str, bot_response: str):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π"""
        if session_id not in self.user_sessions:
            self.user_sessions[session_id] = []
        
        self.user_sessions[session_id].append({
            "user": user_message,
            "assistant": bot_response,
            "timestamp": datetime.now().isoformat()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(self.user_sessions[session_id]) > 10:
            self.user_sessions[session_id] = self.user_sessions[session_id][-10:]
    
    def get_local_session_history(self, session_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        if session_id not in self.user_sessions:
            return ""
        
        history = []
        for exchange in self.user_sessions[session_id][-6:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –æ–±–º–µ–Ω–æ–≤
            history.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {exchange['user']}")
            history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {exchange['assistant']}")
        
        return "\n".join(history) if history else ""
    
    async def call_llm(self, messages: list, max_tokens: int = 1000, temperature: float = 0.7) -> str:
        """–†–æ—É—Ç–µ—Ä LLM –∑–∞–ø—Ä–æ—Å–æ–≤ —Å fallback –º–µ–∂–¥—É OpenAI –∏ Anthropic"""
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º OpenAI
        if self.openai_client:
            try:
                logger.info("ü§ñ –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI")
                response = await self.openai_client.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=messages,
                    max_tokens=max_tokens,
                    temperature=temperature
                )
                result = response.choices[0].message.content
                logger.info("‚úÖ OpenAI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                return result
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
                print(f"‚ùå OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # Fallback –Ω–∞ Anthropic
        if self.anthropic_client:
            try:
                logger.info("ü§ñ Fallback –Ω–∞ Anthropic Claude")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Anthropic API
                system_message = ""
                user_messages = []
                
                for msg in messages:
                    if msg["role"] == "system":
                        system_message = msg["content"]
                    else:
                        user_messages.append(msg)
                
                response = await self.anthropic_client.messages.create(
                    model=ANTHROPIC_MODEL,
                    max_tokens=max_tokens,
                    temperature=temperature,
                    system=system_message,
                    messages=user_messages
                )
                
                result = response.content[0].text
                logger.info("‚úÖ Anthropic –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                return result
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Anthropic: {e}")
                print(f"‚ùå Anthropic –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # –ï—Å–ª–∏ –æ–±–∞ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        logger.error("‚ùå –í—Å–µ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        raise Exception("–í—Å–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    async def generate_response(self, user_message: str, session_id: str, user_name: str = None) -> str:
        try:
            system_prompt = self.instruction.get("system_instruction", "")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Zep Memory
            zep_context = await self.get_zep_memory_context(session_id)
            zep_history = await self.get_zep_recent_messages(session_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∏—Å—Ç–æ—Ä–∏—é –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            if zep_context:
                system_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤:\n{zep_context}"
            
            if zep_history:
                system_prompt += f"\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{zep_history}"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏
            system_prompt += "\n\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Å –∞–±–∑–∞—Ü–∞–º–∏! –ò—Å–ø–æ–ª—å–∑—É–π –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É —Å–º—ã—Å–ª–æ–≤—ã–º–∏ –±–ª–æ–∫–∞–º–∏. –ù–ï –ø–∏—à–∏ —Å–ø–ª–æ—à–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º!"
            system_prompt += "\n\n‚ö†Ô∏è –ü–†–ê–í–ò–õ–û –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø: –ù–ï –Ω–∞—á–∏–Ω–∞–π –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç —Å '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!' –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ /start. –í –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å—É—Ç–∏!"
            
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM —Ä–æ—É—Ç–µ—Ä
            if self.openai_client or self.anthropic_client:
                try:
                    bot_response = await self.call_llm(messages, max_tokens=1000, temperature=0.7)
                except Exception as llm_error:
                    logger.error(f"‚ùå –í—Å–µ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {llm_error}")
                    # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ –≤—Å–µ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
                    user_message_lower = user_message.lower()
                    
                    if any(word in user_message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π']):
                        bot_response = "üëã –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ö—Ä–∏—Å—Ç–∏–Ω–∞, —è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç ignatova-stroinost. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
                    elif any(word in user_message_lower for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ']):
                        bot_response = "üí∞ –¶–µ–Ω—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –æ–±—ä–µ–º–∞ –∏ —Ç–∏–ø–∞ —É—Å–ª—É–≥. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö."
                    else:
                        bot_response = f"–ü–æ–Ω—è–ª–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å. –ú–∏–Ω—É—Ç–æ—á–∫—É!\n\n–ö—Ä–∏—Å—Ç–∏–Ω–∞, ignatova-stroinost"
            else:
                # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–µ–π
                user_message_lower = user_message.lower()
                
                if any(word in user_message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π']):
                    bot_response = "üëã –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ö—Ä–∏—Å—Ç–∏–Ω–∞, —è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç ignatova-stroinost. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
                elif any(word in user_message_lower for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ']):
                    bot_response = "üí∞ –¶–µ–Ω—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –æ–±—ä–µ–º–∞ –∏ —Ç–∏–ø–∞ —É—Å–ª—É–≥. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö."
                else:
                    bot_response = f"–ü–æ–Ω—è–ª–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å. –ú–∏–Ω—É—Ç–æ—á–∫—É!\n\n–ö—Ä–∏—Å—Ç–∏–Ω–∞, ignatova-stroinost"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Zep Memory (—Å fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
            await self.add_to_zep_memory(session_id, user_message, bot_response, user_name)
            
            return bot_response
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫–æ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é.\n\n–ê–Ω–∞—Å—Ç–∞—Å–∏—è, Textil PRO"
    
    async def ensure_user_exists(self, user_id: str, user_data: Dict[str, Any] = None):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç"""
        if not self.zep_client:
            return False
            
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user = await self.zep_client.user.get(user_id=user_id)
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Zep")
                return True
            except:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º
                pass
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info = user_data or {}
            await self.zep_client.user.add(
                user_id=user_id,
                first_name=user_info.get('first_name', 'User'),
                last_name=user_info.get('last_name', ''),
                email=user_info.get('email', f'{user_id}@telegram.user'),
                metadata={
                    'source': 'telegram',
                    'created_at': datetime.now().isoformat()
                }
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Zep: {user_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep: {e}")
            return False
    
    async def ensure_session_exists(self, session_id: str, user_id: str):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –≤ Zep –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç"""
        if not self.zep_client:
            return False
            
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            await self.zep_client.memory.add_session(
                session_id=session_id,
                user_id=user_id,
                metadata={
                    'channel': 'telegram',
                    'created_at': datetime.now().isoformat()
                }
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –≤ Zep: {session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            # –°–µ—Å—Å–∏—è –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏–ª–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            print(f"‚ÑπÔ∏è –°–µ—Å—Å–∏—è {session_id} –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            return True
    
    def get_welcome_message(self) -> str:
        return self.instruction.get("welcome_message", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    
    async def process_voice_message(
        self, 
        voice_data: Dict[str, Any], 
        user_id: str, 
        message_id: str,
        user_name: str = None
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç
        
        Args:
            voice_data: –î–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if not self.voice_service:
            return {
                "success": False,
                "error": "–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è",
                "transcribed_text": None,
                "ai_response": None
            }
        
        try:
            # –≠—Ç–∞–ø 1: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"üé§ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_name or user_id}")
            
            voice_result = await self.voice_service.process_voice_message(
                voice_data, user_id, message_id, language="ru"
            )
            
            if not voice_result["success"]:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {voice_result['error']}")
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {voice_result['error']}",
                    "transcribed_text": None,
                    "ai_response": None
                }
            
            transcribed_text = voice_result["text"]
            logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {transcribed_text[:50]}...")
            
            # –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI –∞–≥–µ–Ω—Ç–∞
            session_id = f"user_{user_id}"
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.zep_client:
                await self.ensure_user_exists(f"user_{user_id}", {
                    'first_name': user_name or f"User_{user_id}",
                    'email': f'{user_id}@telegram.user'
                })
                await self.ensure_session_exists(session_id, f"user_{user_id}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            ai_response = await self.generate_response(
                f"[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]: {transcribed_text}", 
                session_id, 
                user_name
            )
            
            logger.info(f"‚úÖ AI –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {ai_response[:50]}...")
            
            return {
                "success": True,
                "transcribed_text": transcribed_text,
                "ai_response": ai_response,
                "processing_time": voice_result.get("processing_time", 0),
                "duration": voice_result.get("duration", 0),
                "char_count": voice_result.get("char_count", 0)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            logger.error(f"üìã –î–∞–Ω–Ω—ã–µ voice_data: {voice_data}")
            logger.error(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            logger.error(f"üìÑ –ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å: {traceback.format_exc()}")
            return {
                "success": False,
                "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
                "transcribed_text": None,
                "ai_response": None
            }

    def get_instruction_info(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        return {
            "last_updated": self.instruction.get("last_updated", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "system_instruction_length": len(self.instruction.get("system_instruction", "")),
            "welcome_message": self.instruction.get("welcome_message", ""),
            "openai_enabled": self.openai_client is not None,
            "anthropic_enabled": self.anthropic_client is not None,
            "llm_available": self.openai_client is not None or self.anthropic_client is not None,
            "zep_enabled": self.zep_client is not None,
            "voice_enabled": self.voice_service is not None
        }


agent = TextilProAgent()