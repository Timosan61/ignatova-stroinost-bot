"""
üß† Memory —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è ignatova-stroinost-bot
"""

import logging
from datetime import datetime
from typing import Optional, Dict, Any, List
from zep_cloud.client import AsyncZep
from zep_cloud.types import Message

logger = logging.getLogger(__name__)

class MemoryManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ Zep Cloud"""
    
    def __init__(self, zep_api_key: str = None):
        self.zep_client = None
        self.local_sessions = {}  # Fallback –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        
        if zep_api_key and zep_api_key != "test_key":
            try:
                self.zep_client = AsyncZep(api_key=zep_api_key)
                print(f"‚úÖ Zep –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                logger.info(f"‚úÖ Zep Memory –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Zep: {e}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Zep: {e}")
        else:
            print("‚ö†Ô∏è ZEP_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å")
            logger.warning("‚ö†Ô∏è ZEP_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å")
    
    @property
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Zep –∫–ª–∏–µ–Ω—Ç–∞"""
        return self.zep_client is not None
    
    @property
    def memory_mode(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø–∞–º—è—Ç–∏"""
        return "Zep Cloud" if self.is_available else "Local Memory"
    
    async def add_conversation(self, session_id: str, user_message: str, bot_response: str, user_name: str = None) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –ø–∞–º—è—Ç—å"""
        if not self.is_available:
            logger.info(f"‚ö†Ô∏è Zep –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å –¥–ª—è {session_id}")
            self._add_to_local_memory(session_id, user_message, bot_response)
            return False
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID –¥–ª—è —Ä–æ–ª–∏
            user_role = user_name if user_name else f"User_{session_id.split('_')[-1][:6]}"
            
            messages = [
                Message(
                    role=user_role,
                    role_type="user",
                    content=user_message
                ),
                Message(
                    role="–ê–Ω–∞—Å—Ç–∞—Å–∏—è",
                    role_type="assistant",
                    content=bot_response
                )
            ]
            
            await self.zep_client.memory.add(session_id=session_id, messages=messages)
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Zep –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Zep: {type(e).__name__}: {e}")
            # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
            self._add_to_local_memory(session_id, user_message, bot_response)
            return False
    
    async def get_context(self, session_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏"""
        if not self.is_available:
            logger.info(f"‚ö†Ô∏è Zep –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è {session_id}")
            return self._get_local_history(session_id)
            
        try:
            memory = await self.zep_client.memory.get(session_id=session_id)
            context = memory.context if memory.context else ""
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Zep –¥–ª—è {session_id}, –¥–ª–∏–Ω–∞: {len(context)}")
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ Zep: {type(e).__name__}: {e}")
            return self._get_local_history(session_id)
    
    async def get_recent_messages(self, session_id: str, limit: int = 6) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏"""
        if not self.is_available:
            return self._get_local_history(session_id, limit)
            
        try:
            memory = await self.zep_client.memory.get(session_id=session_id)
            if not memory.messages:
                return ""
            
            recent_messages = memory.messages[-limit:]
            formatted_messages = []
            
            for msg in recent_messages:
                role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg.role_type == "user" else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                formatted_messages.append(f"{role}: {msg.content}")
            
            return "\n".join(formatted_messages)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Zep: {e}")
            return self._get_local_history(session_id, limit)
    
    async def ensure_user_exists(self, user_id: str, user_data: Dict[str, Any] = None) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç"""
        if not self.is_available:
            return False
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await self.zep_client.user.get(user_id=user_id)
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Zep")
                return True
            except:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º
                pass
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info = user_data or {}
            await self.zep_client.user.add(
                user_id=user_id,
                first_name=user_info.get('first_name', 'User'),
                last_name=user_info.get('last_name', ''),
                email=user_info.get('email', f'{user_id}@telegram.user'),
                metadata={
                    'source': user_info.get('source', 'telegram'),
                    'created_at': datetime.now().isoformat()
                }
            )
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Zep: {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep: {e}")
            return False
    
    async def ensure_session_exists(self, session_id: str, user_id: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –≤ Zep –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç"""
        if not self.is_available:
            return False
            
        try:
            await self.zep_client.memory.add_session(
                session_id=session_id,
                user_id=user_id,
                metadata={
                    'channel': 'telegram',
                    'created_at': datetime.now().isoformat()
                }
            )
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –≤ Zep: {session_id}")
            return True
            
        except Exception as e:
            # –°–µ—Å—Å–∏—è –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏–ª–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            logger.info(f"‚ÑπÔ∏è –°–µ—Å—Å–∏—è {session_id} –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
    
    def _add_to_local_memory(self, session_id: str, user_message: str, bot_response: str):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        if session_id not in self.local_sessions:
            self.local_sessions[session_id] = []
        
        self.local_sessions[session_id].append({
            "user": user_message,
            "assistant": bot_response,
            "timestamp": datetime.now().isoformat()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(self.local_sessions[session_id]) > 10:
            self.local_sessions[session_id] = self.local_sessions[session_id][-10:]
    
    def _get_local_history(self, session_id: str, limit: int = 6) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        if session_id not in self.local_sessions:
            return ""
        
        history = []
        for exchange in self.local_sessions[session_id][-limit:]:
            history.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {exchange['user']}")
            history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {exchange['assistant']}")
        
        return "\n".join(history) if history else ""
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏"""
        return {
            "memory_mode": self.memory_mode,
            "zep_available": self.is_available,
            "local_sessions_count": len(self.local_sessions),
            "local_sessions": list(self.local_sessions.keys()) if self.local_sessions else []
        }