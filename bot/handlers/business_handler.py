"""
üíº Business API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ignatova-stroinost-bot
"""

import logging
import requests
from typing import Dict, Any, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class BusinessHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Business API —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, bot_token: str, agent=None):
        self.bot_token = bot_token
        self.agent = agent
        self.business_owners = {}  # {connection_id: owner_id}
        
    def handle_business_connection(self, conn_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Business Connection —Å–æ–±—ã—Ç–∏–π"""
        is_enabled = conn_data.get("is_enabled", False)
        connection_id = conn_data.get("id")
        user_info = conn_data.get("user", {})
        user_name = user_info.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        owner_user_id = user_info.get("id")
        
        if connection_id and owner_user_id:
            if is_enabled:
                self.business_owners[connection_id] = owner_user_id
                logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤–ª–∞–¥–µ–ª–µ—Ü Business Connection: {user_name} (ID: {owner_user_id})")
            else:
                self.business_owners.pop(connection_id, None)
                logger.info(f"‚ùå –£–¥–∞–ª–µ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü Business Connection: {user_name}")
        
        status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if is_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
        logger.info(f"{status} –∫ Business –∞–∫–∫–∞—É–Ω—Ç—É: {user_name}")
        logger.info(f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö Business Connection: {len(self.business_owners)}")
        
        return {"ok": True, "action": "business_connection_processed"}
    
    async def handle_business_message(self, message_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Business —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        user_id = message_data.get("from", {}).get("id")
        chat_id = message_data.get("chat", {}).get("id")
        text = message_data.get("text", "")
        user_name = message_data.get("from", {}).get("first_name", "–ö–ª–∏–µ–Ω—Ç")
        business_connection_id = message_data.get("business_connection_id")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice = message_data.get("voice")
        if voice:
            return await self._handle_business_voice_message(message_data)
        
        if not text:
            return {"ok": True, "action": "ignored_empty_business_message"}
        
        logger.info(f"üíº Business —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}): {text[:50]}...")
        
        # –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ Business –∞–∫–∫–∞—É–Ω—Ç–∞
        if self._is_owner_message(user_id, business_connection_id):
            logger.info(f"üö´ –ò–ì–ù–û–†–ò–†–£–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ Business –∞–∫–∫–∞—É–Ω—Ç–∞: {user_name}")
            return {"ok": True, "action": "ignored_owner_message"}
        
        logger.info(f"‚úÖ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {user_name} (ID: {user_id})")
        
        try:
            if self.agent:
                session_id = f"business_{user_id}"
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ—Å—Å–∏—é –≤ Zep
                await self.agent.ensure_user_exists(str(user_id), {
                    'first_name': user_name,
                    'source': 'business_telegram'
                })
                await self.agent.ensure_session_exists(session_id, str(user_id))
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response = await self.agent.generate_response(text, session_id, user_name)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Business API
                if business_connection_id:
                    result = self.send_business_message(chat_id, response, business_connection_id)
                    if result:
                        logger.info(f"‚úÖ Business API: –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {user_name}")
                        return {"ok": True, "action": "business_message_sent"}
                    else:
                        logger.warning(f"‚ö†Ô∏è Business API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        return {"ok": False, "error": "business_api_failed"}
                else:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç business_connection_id")
                    return {"ok": False, "error": "no_business_connection_id"}
            else:
                # Fallback –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                fallback_response = self._get_business_fallback_response(text)
                if business_connection_id:
                    self.send_business_message(chat_id, fallback_response, business_connection_id)
                return {"ok": True, "action": "business_fallback_response"}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ business —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_name}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ Business API
            error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞."
            if business_connection_id:
                self.send_business_message(chat_id, error_message, business_connection_id)
            
            return {"ok": False, "error": str(e)}
    
    async def _handle_business_voice_message(self, message_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Business API"""
        voice = message_data.get("voice", {})
        user_id = message_data.get("from", {}).get("id")
        chat_id = message_data.get("chat", {}).get("id")
        user_name = message_data.get("from", {}).get("first_name", "–ö–ª–∏–µ–Ω—Ç")
        business_connection_id = message_data.get("business_connection_id")
        
        logger.info(f"üé§ Business –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if self._is_owner_message(user_id, business_connection_id):
            logger.info(f"üö´ –ò–ì–ù–û–†–ò–†–£–ï–ú –≥–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: {user_name}")
            return {"ok": True, "action": "ignored_owner_voice"}
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            if not hasattr(self.agent, 'voice_service') or not self.agent.voice_service:
                error_msg = "üé§ –ò–∑–≤–∏–Ω–∏—Ç–µ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º."
                if business_connection_id:
                    self.send_business_message(chat_id, error_msg, business_connection_id)
                return {"ok": True, "action": "voice_unavailable"}
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            transcription_result = await self._process_voice_transcription(voice, user_id)
            
            if not transcription_result.get("success"):
                error_msg = "üé§ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º."
                if business_connection_id:
                    self.send_business_message(chat_id, error_msg, business_connection_id)
                return {"ok": False, "error": "transcription_failed"}
            
            text = transcription_result.get("text", "")
            if not text.strip():
                error_msg = "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                if business_connection_id:
                    self.send_business_message(chat_id, error_msg, business_connection_id)
                return {"ok": True, "action": "empty_transcription"}
            
            logger.info(f"üìù Business —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {text[:100]}...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            text_message_data = message_data.copy()
            text_message_data["text"] = text
            del text_message_data["voice"]  # –£–±–∏—Ä–∞–µ–º voice –¥–∞–Ω–Ω—ã–µ
            
            return await self.handle_business_message(text_message_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Business –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            error_msg = "üé§ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º."
            if business_connection_id:
                self.send_business_message(chat_id, error_msg, business_connection_id)
            return {"ok": False, "error": str(e)}
    
    def _is_owner_message(self, user_id: int, business_connection_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ Business –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if not business_connection_id or business_connection_id not in self.business_owners:
            return False
        
        owner_id = self.business_owners[business_connection_id]
        return str(user_id) == str(owner_id)
    
    def send_business_message(self, chat_id: int, text: str, business_connection_id: str) -> Optional[Dict[str, Any]]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Business API"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "business_connection_id": business_connection_id
        }
        
        try:
            response = requests.post(url, json=data, timeout=10)
            result = response.json()
            
            if result.get("ok"):
                logger.info(f"‚úÖ Business API: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return result.get("result")
            else:
                logger.error(f"‚ùå Business API –æ—à–∏–±–∫–∞: {result}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Business API HTTP –æ—à–∏–±–∫–∞: {e}")
            return None
    
    async def _process_voice_transcription(self, voice_data: Dict[str, Any], user_id: int) -> Dict[str, Any]:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Business API"""
        try:
            file_id = voice_data.get("file_id")
            duration = voice_data.get("duration", 0)
            
            if not file_id:
                return {"success": False, "error": "no_file_id"}
            
            if duration > 600:  # 10 –º–∏–Ω—É—Ç –º–∞–∫—Å
                return {"success": False, "error": "too_long"}
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ API
            file_url = f"https://api.telegram.org/bot{self.bot_token}/getFile?file_id={file_id}"
            file_response = requests.get(file_url, timeout=10)
            file_info = file_response.json()
            
            if not file_info.get("ok"):
                return {"success": False, "error": "file_not_found"}
            
            file_path = file_info["result"]["file_path"]
            audio_url = f"https://api.telegram.org/file/bot{self.bot_token}/{file_path}"
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            transcription = await self.agent.voice_service.transcribe_audio_url(audio_url)
            
            return {
                "success": True,
                "text": transcription,
                "duration": duration
            }
            
        except Exception as e:
            logger.error(f"‚ùå Business —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—à–∏–±–∫–∞: {e}")
            return {"success": False, "error": str(e)}
    
    def _get_business_fallback_response(self, text: str) -> str:
        """–ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è Business API –∫–æ–≥–¥–∞ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        text_lower = text.lower()
        
        if any(word in text_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π']):
            return "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏—è, —è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç ignatova-stroinost. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –æ–¥–µ–∂–¥—ã?"
            
        elif any(word in text_lower for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ']):
            return "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—ä–µ–º–∞ –∑–∞–∫–∞–∑–∞ –∏ —Ç–∏–ø–∞ –∏–∑–¥–µ–ª–∏–π. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö, –∏ —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
            
        elif any(word in text_lower for word in ['—Å–ø–∞—Å–∏–±–æ', 'thanks']):
            return "üòä –í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥–∞ –±—ã–ª–∞ –ø–æ–º–æ—á—å!"
            
        else:
            return "–ü–æ–ª—É—á–∏–ª–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å! –°–µ–π—á–∞—Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É. –ú–∏–Ω—É—Ç–æ—á–∫—É!\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–ê–Ω–∞—Å—Ç–∞—Å–∏—è\nignatova-stroinost"
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å Business Handler"""
        return {
            "total_connections": len(self.business_owners),
            "business_owners": self.business_owners,
            "filter_active": len(self.business_owners) > 0,
            "current_time": datetime.now().isoformat()
        }