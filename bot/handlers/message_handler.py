"""
üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ignatova-stroinost-bot
"""

import logging
from typing import Dict, Any, Optional
import telebot
from datetime import datetime

logger = logging.getLogger(__name__)

class MessageHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, bot: telebot.TeleBot, agent=None):
        self.bot = bot
        self.agent = agent
        
    async def handle_regular_message(self, message_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = message_data.get("from", {}).get("id")
        chat_id = message_data.get("chat", {}).get("id")
        text = message_data.get("text", "")
        user_name = message_data.get("from", {}).get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        if not text:
            return {"ok": True, "action": "ignored_empty_message"}
            
        logger.info(f"üì® –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}): {text[:50]}...")
        
        try:
            if self.agent:
                session_id = f"user_{user_id}"
                # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ Zep
                await self.agent.ensure_user_exists(str(user_id), {
                    'first_name': user_name,
                    'source': 'telegram'
                })
                await self.agent.ensure_session_exists(session_id, str(user_id))
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response = await self.agent.generate_response(text, session_id, user_name)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                self.bot.send_message(chat_id, response)
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
                
                return {"ok": True, "action": "message_processed"}
            else:
                # Fallback –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                fallback_response = self._get_fallback_response(text)
                self.bot.send_message(chat_id, fallback_response)
                return {"ok": True, "action": "fallback_response"}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_name}: {e}")
            error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞."
            self.bot.send_message(chat_id, error_message)
            return {"ok": False, "error": str(e)}
    
    async def handle_voice_message(self, message_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        voice = message_data.get("voice", {})
        user_id = message_data.get("from", {}).get("id")
        chat_id = message_data.get("chat", {}).get("id")
        user_name = message_data.get("from", {}).get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        logger.info(f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id})")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            if not hasattr(self.agent, 'voice_service') or not self.agent.voice_service:
                error_msg = "üé§ –ò–∑–≤–∏–Ω–∏—Ç–µ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º."
                self.bot.send_message(chat_id, error_msg)
                return {"ok": True, "action": "voice_unavailable"}
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            transcription_result = await self._process_voice_transcription(voice, user_id)
            
            if not transcription_result.get("success"):
                error_msg = "üé§ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º."
                self.bot.send_message(chat_id, error_msg)
                return {"ok": False, "error": "transcription_failed"}
            
            text = transcription_result.get("text", "")
            if not text.strip():
                error_msg = "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                self.bot.send_message(chat_id, error_msg)
                return {"ok": True, "action": "empty_transcription"}
            
            logger.info(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {text[:100]}...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            text_message_data = message_data.copy()
            text_message_data["text"] = text
            
            return await self.handle_regular_message(text_message_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            error_msg = "üé§ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º."
            self.bot.send_message(chat_id, error_msg)
            return {"ok": False, "error": str(e)}
    
    async def _process_voice_transcription(self, voice_data: Dict[str, Any], user_id: int) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            file_id = voice_data.get("file_id")
            duration = voice_data.get("duration", 0)
            
            if not file_id:
                return {"success": False, "error": "no_file_id"}
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 10 –º–∏–Ω—É—Ç
            if duration > 600:
                return {"success": False, "error": "too_long"}
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
            file_info = self.bot.get_file(file_id)
            file_url = f"https://api.telegram.org/file/bot{self.bot.token}/{file_info.file_path}"
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å
            transcription = await self.agent.voice_service.transcribe_audio_url(file_url)
            
            return {
                "success": True,
                "text": transcription,
                "duration": duration
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return {"success": False, "error": str(e)}
    
    def _get_fallback_response(self, text: str) -> str:
        """–ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –∫–æ–≥–¥–∞ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        text_lower = text.lower()
        
        if any(word in text_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π']):
            return "üëã –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏—è, —è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç ignatova-stroinost. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
            
        elif any(word in text_lower for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ']):
            return "üí∞ –¶–µ–Ω—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –æ–±—ä–µ–º–∞ –∏ —Ç–∏–ø–∞ —É—Å–ª—É–≥. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö."
            
        elif any(word in text_lower for word in ['—Å–ø–∞—Å–∏–±–æ', 'thanks']):
            return "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥–∞ –ø–æ–º–æ—á—å!"
            
        else:
            return "–ü–æ–ª—É—á–∏–ª–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ú–∏–Ω—É—Ç–æ—á–∫—É!\n\n–ê–Ω–∞—Å—Ç–∞—Å–∏—è, ignatova-stroinost"