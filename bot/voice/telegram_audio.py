"""
Telegram Audio Downloader - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot API
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è ignatova-stroinost-bot
"""

import os
import asyncio
import logging
import aiohttp
import aiofiles
from pathlib import Path
from typing import Optional, Dict, Any
from datetime import datetime

from .config import (
    TELEGRAM_API_BASE_URL, TELEGRAM_FILE_BASE_URL, 
    TEMP_AUDIO_DIR, MAX_AUDIO_SIZE_BYTES, 
    DOWNLOAD_TIMEOUT_SECONDS, ensure_temp_dir
)

logger = logging.getLogger(__name__)


class TelegramAudioDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram"""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.session: Optional[aiohttp.ClientSession] = None
        ensure_temp_dir()
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=DOWNLOAD_TIMEOUT_SECONDS)
        )
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def get_file_info(self, file_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ —á–µ—Ä–µ–∑ Telegram Bot API"""
        try:
            url = TELEGRAM_API_BASE_URL.format(
                token=self.bot_token, 
                method="getFile"
            )
            
            async with self.session.post(url, json={"file_id": file_id}) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("ok"):
                        file_info = data.get("result", {})
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ {file_id}: {file_info.get('file_size')} bytes")
                        return file_info
                    else:
                        logger.error(f"‚ùå Telegram API –æ—à–∏–±–∫–∞: {data.get('description')}")
                        return None
                else:
                    logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {response.status}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ {file_id}: {e}")
            return None
    
    async def download_voice_file(self, file_id: str, voice_data: Dict[str, Any]) -> Optional[str]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –ø–æ file_id
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = voice_data.get('file_size', 0)
            if file_size > MAX_AUDIO_SIZE_BYTES:
                logger.error(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} bytes (–º–∞–∫—Å. {MAX_AUDIO_SIZE_BYTES})")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = await self.get_file_info(file_id)
            if not file_info:
                return None
            
            file_path = file_info.get('file_path')
            if not file_path:
                logger.error("‚ùå file_path –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ Telegram API")
                return None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            download_url = TELEGRAM_FILE_BASE_URL.format(
                token=self.bot_token,
                file_path=file_path
            )
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            duration = voice_data.get('duration', 0)
            file_extension = self._get_file_extension(file_path)
            local_filename = f"voice_{timestamp}_{duration}s_{file_id[:8]}.{file_extension}"
            local_path = os.path.join(TEMP_AUDIO_DIR, local_filename)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª: {download_url}")
            async with self.session.get(download_url) as response:
                if response.status == 200:
                    async with aiofiles.open(local_path, 'wb') as f:
                        async for chunk in response.content.iter_chunked(8192):
                            await f.write(chunk)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è
                    if os.path.exists(local_path) and os.path.getsize(local_path) > 0:
                        logger.info(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {local_path} ({os.path.getsize(local_path)} bytes)")
                        return local_path
                    else:
                        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å–∫–∞—á–∞–ª—Å—è –∏–ª–∏ –ø—É—Å—Ç–æ–π: {local_path}")
                        return None
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: HTTP {response.status}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}: {e}")
            return None
    
    def _get_file_extension(self, file_path: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏"""
        if not file_path:
            return "oga"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö Telegram
        
        extension = Path(file_path).suffix.lstrip('.')
        if not extension:
            return "oga"
        
        return extension
    
    @staticmethod
    def cleanup_temp_files(older_than_hours: int = 2):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            temp_dir = Path(TEMP_AUDIO_DIR)
            if not temp_dir.exists():
                return
            
            current_time = datetime.now().timestamp()
            cutoff_time = current_time - (older_than_hours * 3600)
            
            cleaned_count = 0
            for file_path in temp_dir.glob("voice_*"):
                if file_path.is_file() and file_path.stat().st_mtime < cutoff_time:
                    try:
                        file_path.unlink()
                        cleaned_count += 1
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
            
            if cleaned_count > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    @staticmethod
    def cleanup_file(file_path: str):
        """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")