"""
Voice Service - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è ignatova-stroinost-bot
"""

import logging
from typing import Optional, Dict, Any
from datetime import datetime

from .telegram_audio import TelegramAudioDownloader
from .whisper_client import WhisperTranscriber
from .config import MAX_AUDIO_DURATION_SECONDS

logger = logging.getLogger(__name__)


class VoiceService:
    """–ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ ignatova-stroinost-bot"""
    
    def __init__(self, telegram_bot_token: str, openai_api_key: str):
        self.telegram_bot_token = telegram_bot_token
        self.openai_api_key = openai_api_key
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        self.whisper_client = None
        if openai_api_key:
            try:
                self.whisper_client = WhisperTranscriber(openai_api_key)
                logger.info("‚úÖ Whisper –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è ignatova-stroinost")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Whisper –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                self.whisper_client = None
        else:
            logger.warning("‚ö†Ô∏è OpenAI API key –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è")
    
    async def process_voice_message(
        self, 
        voice_data: Dict[str, Any], 
        user_id: str, 
        message_id: str,
        language: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            voice_data: –î–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
            language: –Ø–∑—ã–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π)
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        start_time = datetime.now()
        
        # –ü–æ–ª—É—á–∞–µ–º file_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
        file_id = voice_data.get('file_id')
        if not file_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞—É–¥–∏–æ
            file_id = voice_data.get('file_id') or voice_data.get('audio', {}).get('file_id')
        
        logger.info(f"üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user_{user_id}, message_{message_id}")
        logger.debug(f"üìã Voice data: {voice_data}")
        logger.info(f"üîë –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π file_id: {file_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
        if not self.whisper_client:
            return {
                "success": False,
                "error": "Voice processing not available (OpenAI API key missing)",
                "text": None,
                "user_id": user_id,
                "message_id": message_id
            }
        
        if not file_id:
            return {
                "success": False,
                "error": "No file_id in voice data",
                "text": None,
                "user_id": user_id,
                "message_id": message_id
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
        duration = voice_data.get('duration', 0)
        if not duration and voice_data.get('audio'):
            duration = voice_data.get('audio', {}).get('duration', 0)
            
        logger.info(f"üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration}—Å")
        
        if duration > MAX_AUDIO_DURATION_SECONDS:
            return {
                "success": False,
                "error": f"Audio too long: {duration}s (max {MAX_AUDIO_DURATION_SECONDS}s)",
                "text": None,
                "user_id": user_id,
                "message_id": message_id
            }
        
        audio_file_path = None
        
        try:
            # –≠—Ç–∞–ø 1: –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            logger.info("üì• –≠—Ç–∞–ø 1: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞...")
            download_result = await self._download_audio(file_id, voice_data)
            
            if not download_result["success"]:
                return {
                    "success": False,
                    "error": f"Download failed: {download_result['error']}",
                    "text": None,
                    "user_id": user_id,
                    "message_id": message_id
                }
            
            audio_file_path = download_result["file_path"]
            
            # –≠—Ç–∞–ø 2: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            logger.info("üéØ –≠—Ç–∞–ø 2: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ...")
            transcription_result = await self.whisper_client.transcribe(
                audio_file_path, 
                language=language or "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π –¥–ª—è ignatova-stroinost
            )
            
            if not transcription_result["success"]:
                return {
                    "success": False,
                    "error": f"Transcription failed: {transcription_result['error']}",
                    "text": None,
                    "user_id": user_id,
                    "message_id": message_id,
                    "file_path": audio_file_path
                }
            
            # –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            processing_time = (datetime.now() - start_time).total_seconds()
            
            result = {
                "success": True,
                "text": transcription_result["text"],
                "user_id": user_id,
                "message_id": message_id,
                "file_id": file_id,
                "duration": duration,
                "processing_time": processing_time,
                "char_count": transcription_result.get("char_count", 0),
                "language": transcription_result.get("language"),
                "file_path": audio_file_path
            }
            
            logger.info(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {processing_time:.1f}—Å")
            logger.info(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {result['text'][:100]}...")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {
                "success": False,
                "error": f"Processing error: {str(e)}",
                "text": None,
                "user_id": user_id,
                "message_id": message_id,
                "file_path": audio_file_path
            }
        
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if audio_file_path:
                self._cleanup_audio_file(audio_file_path)
    
    async def _download_audio(self, file_id: str, voice_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram API"""
        try:
            async with TelegramAudioDownloader(self.telegram_bot_token) as downloader:
                file_path = await downloader.download_voice_file(file_id, voice_data)
                
                if file_path:
                    return {
                        "success": True,
                        "file_path": file_path,
                        "error": None
                    }
                else:
                    return {
                        "success": False,
                        "file_path": None,
                        "error": "Failed to download audio file"
                    }
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            return {
                "success": False,
                "file_path": None,
                "error": str(e)
            }
    
    def _cleanup_audio_file(self, file_path: str):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª"""
        try:
            TelegramAudioDownloader.cleanup_file(file_path)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
    
    async def test_service(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞"""
        test_results = {
            "telegram_token": bool(self.telegram_bot_token),
            "openai_key": bool(self.openai_api_key),
            "whisper_client": bool(self.whisper_client),
            "whisper_connection": False
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Whisper API
        if self.whisper_client:
            try:
                test_results["whisper_connection"] = await self.whisper_client.test_connection()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Whisper: {e}")
                test_results["whisper_connection"] = False
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        test_results["service_ready"] = (
            test_results["telegram_token"] and 
            test_results["whisper_client"] and 
            test_results["whisper_connection"]
        )
        
        return test_results
    
    def get_service_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ"""
        return {
            "service_name": "ignatova-stroinost Voice Processing Service",
            "version": "1.0.0",
            "components": {
                "telegram_downloader": bool(self.telegram_bot_token),
                "whisper_transcriber": bool(self.whisper_client)
            },
            "supported_formats": self.whisper_client.get_supported_formats() if self.whisper_client else [],
            "max_duration": MAX_AUDIO_DURATION_SECONDS,
            "default_language": "ru",
            "status": "ready" if self.whisper_client else "not_configured"
        }
    
    async def transcribe_voice_message(
        self, 
        voice_data: Dict[str, Any], 
        user_id: str, 
        message_id: str
    ) -> Dict[str, Any]:
        """
        –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ –æ–±—Ä–∞–∑—Ü—É artem.integrator)
        
        Args:
            voice_data: –î–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {"success": bool, "text": str, "error": str}
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            result = await self.process_voice_message(voice_data, user_id, message_id, language="ru")
            
            if result["success"]:
                return {
                    "success": True,
                    "text": result["text"],
                    "error": None
                }
            else:
                return {
                    "success": False,
                    "text": None,
                    "error": result["error"]
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {
                "success": False,
                "text": None,
                "error": f"Transcription error: {str(e)}"
            }

    @staticmethod
    def cleanup_old_files():
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        try:
            TelegramAudioDownloader.cleanup_temp_files(older_than_hours=2)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")