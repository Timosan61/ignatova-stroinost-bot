import streamlit as st
import json
import os
import sys
from datetime import datetime

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from admin.config import INSTRUCTION_FILE, DEFAULT_INSTRUCTION, STREAMLIT_CONFIG, BOT_URL
from admin.auth import check_password, show_auth_info


def load_instruction():
    try:
        with open(INSTRUCTION_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        default_data = DEFAULT_INSTRUCTION.copy()
        default_data["last_updated"] = datetime.now().isoformat()
        return default_data


def save_instruction(instruction_data):
    try:
        instruction_data["last_updated"] = datetime.now().isoformat()
        with open(INSTRUCTION_FILE, 'w', encoding='utf-8') as f:
            json.dump(instruction_data, f, ensure_ascii=False, indent=2)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GitHub
        try:
            import subprocess
            import os
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            project_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            
            # Git –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ–ø—É—à–∞
            subprocess.run(['git', 'add', 'data/instruction.json'], 
                          cwd=project_dir, capture_output=True)
            
            commit_msg = f"Admin: –û–±–Ω–æ–≤–ª–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±–æ—Ç–∞ ({datetime.now().strftime('%H:%M')})\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>"
            
            subprocess.run(['git', 'commit', '-m', commit_msg], 
                          cwd=project_dir, capture_output=True)
            
            subprocess.run(['git', 'push', 'origin', 'main'], 
                          cwd=project_dir, capture_output=True)
            
            print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub")
            
        except Exception as git_error:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å GitHub: {git_error}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ git –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        
        return True
    except Exception as e:
        return False


def main():
    st.set_page_config(
        page_title=STREAMLIT_CONFIG['page_title'],
        page_icon=STREAMLIT_CONFIG['page_icon'],
        layout=STREAMLIT_CONFIG['layout']
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not check_password():
        return
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫  
    st.title("ü§ñ Ignatova Stroinost Bot - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    show_auth_info()
    
    if not os.path.exists(INSTRUCTION_FILE):
        st.warning("‚ö†Ô∏è –§–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")
    
    instruction_data = load_instruction()
    
    # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
    tab1, tab2, tab3 = st.tabs(["üìù –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"])
    
    with tab1:
        system_instruction = st.text_area(
            "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:",
            value=instruction_data.get("system_instruction", ""),
            height=500,
            help="–ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –±–æ—Ç–∞ - –µ–≥–æ —Ä–æ–ª—å, –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è"
        )
        
        welcome_message = st.text_area(
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            value=instruction_data.get("welcome_message", ""),
            height=150,
            help="–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        st.info(f"üí¨ –î–ª–∏–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {len(instruction_data.get('system_instruction', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
    
    with tab2:
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
        
        settings = instruction_data.get("settings", {})
        
        col1, col2 = st.columns(2)
        
        with col1:
            voice_enabled = st.checkbox(
                "–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                value=settings.get("voice_enabled", True),
                help="–í–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
            )
            
            memory_enabled = st.checkbox(
                "–ü–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤",
                value=settings.get("memory_enabled", True),
                help="–í–∫–ª—é—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"
            )
        
        with col2:
            debug_mode = st.checkbox(
                "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏",
                value=settings.get("debug_mode", False),
                help="–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
            )
            
            max_memory_messages = st.number_input(
                "–ú–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏",
                min_value=10,
                max_value=200,
                value=settings.get("max_memory_messages", 50),
                help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è"
            )
        
        response_temperature = st.slider(
            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤",
            min_value=0.0,
            max_value=1.0,
            value=settings.get("response_temperature", 0.7),
            step=0.1,
            help="–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ (0 = —Å—Ç—Ä–æ–≥–æ, 1 = —Ç–≤–æ—Ä—á–µ—Å–∫–∏)"
        )
    
    with tab3:
        st.subheader("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        if "last_updated" in instruction_data:
            last_update = instruction_data["last_updated"]
            if last_update:
                st.info(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {last_update}")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞", use_container_width=True):
                try:
                    import requests
                    response = requests.get(f"{BOT_URL}/", timeout=10)
                    if response.status_code == 200:
                        st.success("‚úÖ –ë–æ—Ç –æ–Ω–ª–∞–π–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ debug endpoint –µ—Å–ª–∏ –µ—Å—Ç—å
                        try:
                            debug_response = requests.get(f"{BOT_URL}/debug/status", timeout=5)
                            if debug_response.status_code == 200:
                                debug_data = debug_response.json()
                                st.json(debug_data)
                        except:
                            pass
                    else:
                        st.error(f"‚ùå HTTP {response.status_code}")
                except Exception as e:
                    st.error(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É: {e}")
        
        with col2:
            if st.button("üîÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ", use_container_width=True):
                try:
                    import requests
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    update_data = {
                        "system_instruction": system_instruction,
                        "welcome_message": welcome_message,
                        "settings": {
                            "voice_enabled": voice_enabled,
                            "memory_enabled": memory_enabled,
                            "debug_mode": debug_mode,
                            "max_memory_messages": max_memory_messages,
                            "response_temperature": response_temperature
                        }
                    }
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API endpoint
                    response = requests.post(
                        f"{BOT_URL}/admin/update-instructions", 
                        json=update_data,
                        headers={"Content-Type": "application/json"},
                        timeout=15
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        if data.get("status") == "success":
                            st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ! –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")
                            st.info(f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {data.get('new_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                        else:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    else:
                        st.error(f"‚ùå HTTP {response.status_code}: {response.text}")
                        
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
    
    st.markdown("---")
    
    if st.button("üöÄ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary", use_container_width=True):
        new_instruction_data = {
            "system_instruction": system_instruction,
            "welcome_message": welcome_message,
            "settings": {
                "voice_enabled": voice_enabled,
                "memory_enabled": memory_enabled,
                "debug_mode": debug_mode,
                "max_memory_messages": max_memory_messages,
                "response_temperature": response_temperature
            }
        }
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (–¥–ª—è backup) + GitHub push
            if save_instruction(new_instruction_data.copy()):
                st.success("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ!")
            
            # –ì–ª–∞–≤–Ω–æ–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ –±–æ—Ç
            import requests
            response = requests.post(
                f"{BOT_URL}/admin/update-instructions", 
                json=new_instruction_data,
                headers={"Content-Type": "application/json"},
                timeout=15
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("status") == "success":
                    st.success("üéâ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ! –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")
                    st.info(f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {data.get('new_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    st.balloons()
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                st.error(f"‚ùå HTTP {response.status_code}: {response.text}")
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()