import streamlit as st
import git
import os
import requests
import base64
import json
from datetime import datetime
from typing import Optional, Dict, Any

class DeployManager:
    def __init__(self):
        self.repo_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        
        # GitHub API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.github_token = st.secrets.get("GITHUB_TOKEN", os.getenv("GITHUB_TOKEN"))
        self.github_owner = st.secrets.get("GITHUB_OWNER", "Timosan61")
        self.github_repo = st.secrets.get("GITHUB_REPO", "Textill_PRO_BOT")
        self.github_api_base = "https://api.github.com"
        
        # Railway –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.railway_token = st.secrets.get("RAILWAY_TOKEN", os.getenv("RAILWAY_TOKEN"))
        self.railway_project_id = st.secrets.get("RAILWAY_PROJECT_ID", os.getenv("RAILWAY_PROJECT_ID"))
        self.railway_service_id = st.secrets.get("RAILWAY_SERVICE_ID", os.getenv("RAILWAY_SERVICE_ID"))
        
    def get_git_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            repo = git.Repo(self.repo_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ uncommitted –∏–∑–º–µ–Ω–µ–Ω–∏—è
            is_dirty = repo.is_dirty()
            untracked_files = repo.untracked_files
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
            last_commit = repo.head.commit
            
            return {
                "is_dirty": is_dirty,
                "untracked_files": untracked_files,
                "last_commit_sha": last_commit.hexsha[:8],
                "last_commit_message": last_commit.message.strip(),
                "last_commit_date": datetime.fromtimestamp(last_commit.committed_date),
                "current_branch": repo.active_branch.name,
                "status": "clean" if not is_dirty and not untracked_files else "dirty"
            }
        except Exception as e:
            return {"error": str(e)}
    
    def get_file_content_from_github(self, file_path: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–∑ GitHub —á–µ—Ä–µ–∑ API"""
        try:
            url = f"{self.github_api_base}/repos/{self.github_owner}/{self.github_repo}/contents/{file_path}"
            headers = {
                "Authorization": f"token {self.github_token}",
                "Accept": "application/vnd.github.v3+json"
            }
            
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 404:
                return None  # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {response.status_code}")
                return None
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GitHub API: {e}")
            return None
    
    def update_file_via_github_api(self, file_path: str, content: str, commit_message: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ GitHub —á–µ—Ä–µ–∑ API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –¥–ª—è SHA
            current_file = self.get_file_content_from_github(file_path)
            
            url = f"{self.github_api_base}/repos/{self.github_owner}/{self.github_repo}/contents/{file_path}"
            headers = {
                "Authorization": f"token {self.github_token}",
                "Accept": "application/vnd.github.v3+json",
                "Content-Type": "application/json"
            }
            
            # –ö–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ base64
            content_encoded = base64.b64encode(content.encode('utf-8')).decode('utf-8')
            
            data = {
                "message": commit_message,
                "content": content_encoded,
                "branch": "main"
            }
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º SHA
            if current_file:
                data["sha"] = current_file["sha"]
            
            response = requests.put(url, headers=headers, json=data)
            
            if response.status_code in [200, 201]:
                return True
            else:
                return False
                
        except Exception as e:
            return False
    
    def trigger_railway_deploy(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–ø–ª–æ–π –Ω–∞ Railway —á–µ—Ä–µ–∑ API"""
        try:
            headers = {
                "Authorization": f"Bearer {self.railway_token}",
                "Content-Type": "application/json"
            }
            
            # GraphQL –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–µ–ø–ª–æ—è —Å–ª—É–∂–±—ã
            query = """
            mutation serviceInstanceRedeploy($serviceId: String!) {
                serviceInstanceRedeploy(serviceId: $serviceId) {
                    id
                    status
                }
            }
            """
            
            variables = {
                "serviceId": self.railway_service_id
            }
            
            response = requests.post(
                "https://backboard.railway.com/graphql/v2",
                headers=headers,
                json={
                    "query": query,
                    "variables": variables
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                if "errors" not in result:
                    return True
                else:
                    print(f"Railway API errors: {result['errors']}")
                    return False
            else:
                print(f"Railway API request failed: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"Railway deploy error: {e}")
            return False
    
    def auto_deploy_changes(self, commit_message: str, instruction_content: str = None) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ GitHub API + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Railway"""
        
        if instruction_content is None:
            st.error("‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GitHub —Ç–æ–∫–µ–Ω–∞
        if not self.github_token:
            st.error("‚ùå GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        # –®–∞–≥ 1: –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ GitHub
        st.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ GitHub...")
        github_success = self.update_file_via_github_api("data/instruction.json", instruction_content, commit_message)
        
        if not github_success:
            st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ GitHub")
            return False
            
        st.success("‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω –≤ GitHub")
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Railway
        st.info("üîÑ Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å GitHub...")
        st.info("‚è≥ –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        st.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç' –Ω–∏–∂–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        return True

def show_deploy_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üöÄ –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è")
    
    deploy_manager = DeployManager()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GitHub API
    try:
        st.sidebar.info(f"""
        **GitHub –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:**
        {deploy_manager.github_owner}/{deploy_manager.github_repo}
        
        **GitHub API:**
        {'‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' if deploy_manager.github_token else '‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
        
        **Railway:**
        ‚úÖ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub
        """)
    except Exception as e:
        st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    st.sidebar.markdown("### ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
    try:
        import requests
        response = requests.get("https://artyom-integrator-production.up.railway.app/", timeout=5)
        if response.status_code == 200:
            st.sidebar.success("‚úÖ –ë–æ—Ç –æ–Ω–ª–∞–π–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–ø—Ç
            prompt_response = requests.get("https://artyom-integrator-production.up.railway.app/debug/prompt", timeout=5)
            if prompt_response.status_code == 200:
                prompt_data = prompt_response.json()
                st.sidebar.info(f"""
                **–ü—Ä–æ–º–ø—Ç:**
                –û–±–Ω–æ–≤–ª–µ–Ω: {prompt_data.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}
                –î–ª–∏–Ω–∞: {prompt_data.get('system_instruction_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤
                """)
        else:
            st.sidebar.error("‚ùå –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞: {str(e)[:50]}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å Git —Å—Ç–∞—Ç—É—Å (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–±–ª–∞–∫–µ)
    try:
        git_status = deploy_manager.get_git_status()
        
        if "error" not in git_status:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å Git
            if git_status["status"] == "clean":
                st.sidebar.success("‚úÖ Git: –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            else:
                st.sidebar.warning("‚ö†Ô∏è Git: –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ
            st.sidebar.info(f"""
            **–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:**
            `{git_status['last_commit_sha']}`
            
            **–°–æ–æ–±—â–µ–Ω–∏–µ:**
            {git_status['last_commit_message'][:50]}...
            
            **–î–∞—Ç–∞:**
            {git_status['last_commit_date'].strftime('%d.%m.%Y %H:%M')}
            """)
        else:
            st.sidebar.warning("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π Git –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ GitHub API)")
    except Exception:
        st.sidebar.warning("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π Git –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ GitHub API)")
    
    return deploy_manager